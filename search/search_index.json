{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ECE 196 WI22 Course Website Requirements In the class we use following items: Raspberry Pi kit Some kind of web browser and terminal access Python via Anaconda VSCode for code editor Recommended for additional tutorial items: Git to use Github Pages Github Account to use Github Pages Google Account to use Firebase Getting Help If you are an ECE196 student and have question please post on Piazza: Piazza WI22 TA Staff Curtis Lee Office Hours Email LinkedIn Dillon Hicks Office Hours Email LinkedIn George Troulis Office Hours Email LinkedIn Q&A How did you make this website? MkDocs which is honestly a very OP piece of software. What was ECE196 IOT like during covid? Live Demo Documentation What was ECE196 IOT like before covid? Live Demo Documentation","title":"Home"},{"location":"#ece-196-wi22-course-website","text":"","title":"ECE 196 WI22 Course Website"},{"location":"#requirements","text":"In the class we use following items: Raspberry Pi kit Some kind of web browser and terminal access Python via Anaconda VSCode for code editor Recommended for additional tutorial items: Git to use Github Pages Github Account to use Github Pages Google Account to use Firebase","title":"Requirements"},{"location":"#getting-help","text":"If you are an ECE196 student and have question please post on Piazza: Piazza WI22","title":"Getting Help"},{"location":"#ta-staff","text":"","title":"TA Staff"},{"location":"#curtis-lee","text":"Office Hours Email LinkedIn","title":"Curtis Lee"},{"location":"#dillon-hicks","text":"Office Hours Email LinkedIn","title":"Dillon Hicks"},{"location":"#george-troulis","text":"Office Hours Email LinkedIn","title":"George Troulis"},{"location":"#qa","text":"How did you make this website? MkDocs which is honestly a very OP piece of software. What was ECE196 IOT like during covid? Live Demo Documentation What was ECE196 IOT like before covid? Live Demo Documentation","title":"Q&amp;A"},{"location":"3dprint/","text":"Written by Curtis Lee Slides Where to 3D Print ECE Makerspace This video shows you how to use the Lulzbot 3D printers specific to the ECE Makerspace in Jacobs Hall Basement. Note these are FDM printers that use only colored PLA filament. You will need to watch this video to pass the quiz for access to the printers: Other Locations On UCSD campus you may also check out these other places that offer 3D printing: Digital Media Lab Envision Maker Studio 3D Printing Assignment Question Makerspace Quiz 1. Complete the ECE Makespace 3D Printing Quiz (You will be unable to 3D print your parts below if you do not complete this quiz) Design Small Piece 2. Obtain an .stl of a small item: Recommended: Try using your model from MCAD Assigment: Use mm (millimeter) scaling and export as .stl Design your own using CAD software. Use whichever you want, here are some examples: Onshape - Get free plan Solidworks - Free with student access code from UCSD Autodesk Fusion 360 - Free for personal use If your model isn't suited for 3D printing, downloading a premade model online instead is also OK. Meet Size Constraints 3. Please keep it small - About 75mm^3 (3 cubic inches) or less. Larger prints take much longer time and material. If the print fails, it could be costly. If your model is too large, it can be scaled down in the printer software Using less infill and lower resolution settings leads to faster print Turn on support material or modify the design to deal with overhang Print the Piece 4. Print the piece using ECE Makerspace or other printer. Take a picture of the completed print. Deliverables 5. Upload both the .stl and picture of completed print to the assignment. WI22 Note: Since we are unable to print this in the first two weeks, we will print the nametag when we are able to return in the makerspace. The design is still due by the due date mentioned in class. If you have access to 3D printer outside class you may also use that to complete the assignment.","title":"3D Printing"},{"location":"3dprint/#slides","text":"","title":"Slides"},{"location":"3dprint/#where-to-3d-print","text":"","title":"Where to 3D Print"},{"location":"3dprint/#ece-makerspace","text":"This video shows you how to use the Lulzbot 3D printers specific to the ECE Makerspace in Jacobs Hall Basement. Note these are FDM printers that use only colored PLA filament. You will need to watch this video to pass the quiz for access to the printers:","title":"ECE Makerspace"},{"location":"3dprint/#other-locations","text":"On UCSD campus you may also check out these other places that offer 3D printing: Digital Media Lab Envision Maker Studio","title":"Other Locations"},{"location":"3dprint/#3d-printing-assignment","text":"Question","title":"3D Printing Assignment"},{"location":"3dprint/#makerspace-quiz","text":"1. Complete the ECE Makespace 3D Printing Quiz (You will be unable to 3D print your parts below if you do not complete this quiz)","title":"Makerspace Quiz"},{"location":"3dprint/#design-small-piece","text":"2. Obtain an .stl of a small item: Recommended: Try using your model from MCAD Assigment: Use mm (millimeter) scaling and export as .stl Design your own using CAD software. Use whichever you want, here are some examples: Onshape - Get free plan Solidworks - Free with student access code from UCSD Autodesk Fusion 360 - Free for personal use If your model isn't suited for 3D printing, downloading a premade model online instead is also OK.","title":"Design Small Piece"},{"location":"3dprint/#meet-size-constraints","text":"3. Please keep it small - About 75mm^3 (3 cubic inches) or less. Larger prints take much longer time and material. If the print fails, it could be costly. If your model is too large, it can be scaled down in the printer software Using less infill and lower resolution settings leads to faster print Turn on support material or modify the design to deal with overhang","title":"Meet Size Constraints"},{"location":"3dprint/#print-the-piece","text":"4. Print the piece using ECE Makerspace or other printer. Take a picture of the completed print.","title":"Print the Piece"},{"location":"3dprint/#deliverables","text":"5. Upload both the .stl and picture of completed print to the assignment. WI22 Note: Since we are unable to print this in the first two weeks, we will print the nametag when we are able to return in the makerspace. The design is still due by the due date mentioned in class. If you have access to 3D printer outside class you may also use that to complete the assignment.","title":"Deliverables"},{"location":"basics/","text":"","title":"Basics"},{"location":"bonus/","text":"give html extra files vs code livestream thonny autoloading scripts? seperating html into in seperate files? extra hardware","title":"Bonus"},{"location":"bootstrap/","text":"Intro to Bootstrap Written by Curtis Lee Intro to Bootstrap At this point you may have noticed our website overall still looks pretty unattractive. We could write more CSS from scratch to make our website look exactly how we want, but in most cases that's a waste of time. Instead, we can use another framework for CSS called Bootstrap. Bootstrap basically gives us a complete CSS stylesheet with designs for all the common UI elements to use in our app, including page layouts, fonts, buttons, textboxes, etc. Read More Here we only briefly explore a small feature set of Bootstrap. It is recommended to browse the documentation to see all it has to offer. Adding Bootstrap Similarly to including JavaScript, we can include CSS stylesheets before our existing <style> element like this: <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"> When we refresh the page, we will immediately see the default font changed to a sans-serif type, the default for Bootstrap. To assign HTML tags style definitions from CSS, we add class attributes. Grid System Bootstrap's approach to page layout is a dynamic grid system. We can utilize this to improve the layout of the page. Here is an example of a basic 3 column layout: <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> One of three columns </div> <div class=\"col\"> One of three columns </div> <div class=\"col\"> One of three columns </div> </div> </div> One possible implementation on our page: Read More To better see how this grids and containers system works, check out the official example . Try resizing the window and see how the elements react! Margins Margins are useful to put set amounts of space between different elements. Margins can be specified with class attributes with a letter m for margin, another letter for the direction, and number for size: class=\"mt-5\" puts a margin on top of size 5 class=\"ml-2\" puts margin on the left of size 2 Combined margins: class=\"mr-5 mb-5\" will put a margin on both right and bottom of size 5 class=\"m-5\" will put a margin on all sides of size 5 We can wrap our page title in a 1x1 container and give it some margin from the top of the page like this: <div class=\"container mt-5\"> <div class=\"row\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </div> </div> Cards Cards are an all-purpose way to hold content. Different types of content can also be mix and matched in a card. Here is an example of a basic card: <div class=\"card\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <div class=\"card-body\"> <h5 class=\"card-title\">Device: Raspberry Pi</h5> <p class=\"card-text\">The Raspberry Pi is awesome!</p> <a href=\"https://www.raspberrypi.org/\" class=\"btn btn-primary\">Learn More</a> </div> </div> </div> Combining cards with layouts we could create this: Tables To improve our display of the \"Selected Values\", we can convert it into a Bootstrap table. Creating a table can first be done with HTML tags like this: <table class=\"table\"> <thead class=\".thead-light\"> <tr> <th scope=\"col\">Type</th> <th scope=\"col\">Color</th> <th scope=\"col\">On</th> </tr> </thead> <tbody> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Red</td> <td> <input type=\"checkbox\" v-model=\"color.r\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Green</td> <td> <input type=\"checkbox\" v-model=\"color.g\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Blue</td> <td> <input type=\"checkbox\" v-model=\"color.b\" v-on:change=\"updateColor()\"> </td> </tr> </tbody> </table> Info Lists or tabular data of large or arbitrary sizes should be generated using the v-for directive (akin to a for loop), but since we aren't using any we won't go over it in this course. Also, to get the icons to display properly, add this class to our custom <style> block: .icon { width: 2em; height: 2em; } Adding the table to one of the cards shown previously could look like this: Buttons Bootstrap also give us templates for buttons, as well as \"button groups\" which can combine adjacent buttons into a single bar. <div class=\"btn-group\" role=\"group\"> <button v-on:click=\"selectAll(true); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Select All</button> <button v-on:click=\"selectAll(false); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Deselect All</button> </div> Lists We can use Bootstrap List Groups on top of an HTML list to make our sensor data card look nice. <ul class=\"list-group\"> <li class=\"list-group-item\">Temperature: 40C </li> <li class=\"list-group-item\">Humidity: 50%</li> </ul> Final Touches To make all the cards the same height we can add d-flex to each column <div> , and then add w-100 to each card <div> so that the fill the column properly, like this: ... <div class=\"col d-flex\"> <div class=\"card w-100\"> ... Info Fine tuning layout specifics can get very time consuming so we won't go over too many tricky details. Also replacing the checkboxes with toggle switches are a nice touch: <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.r\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-r\"> <label class=\"custom-control-label\" for=\"color-r\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.g\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-g\"> <label class=\"custom-control-label\" for=\"color-g\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.b\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-b\"> <label class=\"custom-control-label\" for=\"color-b\"></label> </div> Finally, its a good idea to associate color with each entry on the LED table with some inline style attributes: style=\"background-color: lightcoral;\" style=\"background-color: lightgreen;\" style=\"background-color: lightskyblue;\" Here is what the final result can look like: Data Visualization Methods We are able acquire tons of data with our DHT22 sensor, and potentially other sensor modules, however, currently they are not being recorded or visualized over time. We can create more advanced views of our data with yet another JavaScript framework called Chart.js . With Chart.js we can create good looking and interactive graphs of all types .","title":"Bootstrap"},{"location":"bootstrap/#intro-to-bootstrap","text":"Written by Curtis Lee","title":"Intro to Bootstrap"},{"location":"bootstrap/#intro-to-bootstrap_1","text":"At this point you may have noticed our website overall still looks pretty unattractive. We could write more CSS from scratch to make our website look exactly how we want, but in most cases that's a waste of time. Instead, we can use another framework for CSS called Bootstrap. Bootstrap basically gives us a complete CSS stylesheet with designs for all the common UI elements to use in our app, including page layouts, fonts, buttons, textboxes, etc. Read More Here we only briefly explore a small feature set of Bootstrap. It is recommended to browse the documentation to see all it has to offer.","title":"Intro to Bootstrap"},{"location":"bootstrap/#adding-bootstrap","text":"Similarly to including JavaScript, we can include CSS stylesheets before our existing <style> element like this: <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"> When we refresh the page, we will immediately see the default font changed to a sans-serif type, the default for Bootstrap. To assign HTML tags style definitions from CSS, we add class attributes.","title":"Adding Bootstrap"},{"location":"bootstrap/#grid-system","text":"Bootstrap's approach to page layout is a dynamic grid system. We can utilize this to improve the layout of the page. Here is an example of a basic 3 column layout: <div class=\"container\"> <div class=\"row\"> <div class=\"col\"> One of three columns </div> <div class=\"col\"> One of three columns </div> <div class=\"col\"> One of three columns </div> </div> </div> One possible implementation on our page: Read More To better see how this grids and containers system works, check out the official example . Try resizing the window and see how the elements react!","title":"Grid System"},{"location":"bootstrap/#margins","text":"Margins are useful to put set amounts of space between different elements. Margins can be specified with class attributes with a letter m for margin, another letter for the direction, and number for size: class=\"mt-5\" puts a margin on top of size 5 class=\"ml-2\" puts margin on the left of size 2 Combined margins: class=\"mr-5 mb-5\" will put a margin on both right and bottom of size 5 class=\"m-5\" will put a margin on all sides of size 5 We can wrap our page title in a 1x1 container and give it some margin from the top of the page like this: <div class=\"container mt-5\"> <div class=\"row\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </div> </div>","title":"Margins"},{"location":"bootstrap/#cards","text":"Cards are an all-purpose way to hold content. Different types of content can also be mix and matched in a card. Here is an example of a basic card: <div class=\"card\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <img src=\"pi.jpg\" class=\"card-img-top\" alt=\"pi.jpg\"> <div class=\"card-body\"> <h5 class=\"card-title\">Device: Raspberry Pi</h5> <p class=\"card-text\">The Raspberry Pi is awesome!</p> <a href=\"https://www.raspberrypi.org/\" class=\"btn btn-primary\">Learn More</a> </div> </div> </div> Combining cards with layouts we could create this:","title":"Cards"},{"location":"bootstrap/#tables","text":"To improve our display of the \"Selected Values\", we can convert it into a Bootstrap table. Creating a table can first be done with HTML tags like this: <table class=\"table\"> <thead class=\".thead-light\"> <tr> <th scope=\"col\">Type</th> <th scope=\"col\">Color</th> <th scope=\"col\">On</th> </tr> </thead> <tbody> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Red</td> <td> <input type=\"checkbox\" v-model=\"color.r\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Green</td> <td> <input type=\"checkbox\" v-model=\"color.g\" v-on:change=\"updateColor()\"> </td> </tr> <tr> <td> <img class=\"icon\" src=\"led.png\" alt=\"led\"> </td> <td>Blue</td> <td> <input type=\"checkbox\" v-model=\"color.b\" v-on:change=\"updateColor()\"> </td> </tr> </tbody> </table> Info Lists or tabular data of large or arbitrary sizes should be generated using the v-for directive (akin to a for loop), but since we aren't using any we won't go over it in this course. Also, to get the icons to display properly, add this class to our custom <style> block: .icon { width: 2em; height: 2em; } Adding the table to one of the cards shown previously could look like this:","title":"Tables"},{"location":"bootstrap/#buttons","text":"Bootstrap also give us templates for buttons, as well as \"button groups\" which can combine adjacent buttons into a single bar. <div class=\"btn-group\" role=\"group\"> <button v-on:click=\"selectAll(true); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Select All</button> <button v-on:click=\"selectAll(false); updateColor();\" type=\"button\" class=\"btn btn-secondary\">Deselect All</button> </div>","title":"Buttons"},{"location":"bootstrap/#lists","text":"We can use Bootstrap List Groups on top of an HTML list to make our sensor data card look nice. <ul class=\"list-group\"> <li class=\"list-group-item\">Temperature: 40C </li> <li class=\"list-group-item\">Humidity: 50%</li> </ul>","title":"Lists"},{"location":"bootstrap/#final-touches","text":"To make all the cards the same height we can add d-flex to each column <div> , and then add w-100 to each card <div> so that the fill the column properly, like this: ... <div class=\"col d-flex\"> <div class=\"card w-100\"> ... Info Fine tuning layout specifics can get very time consuming so we won't go over too many tricky details. Also replacing the checkboxes with toggle switches are a nice touch: <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.r\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-r\"> <label class=\"custom-control-label\" for=\"color-r\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.g\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-g\"> <label class=\"custom-control-label\" for=\"color-g\"></label> </div> <div v-on:change=\"updateColor()\" class=\"custom-control custom-switch\"> <input v-model=\"color.b\" type=\"checkbox\" class=\"custom-control-input\" id=\"color-b\"> <label class=\"custom-control-label\" for=\"color-b\"></label> </div> Finally, its a good idea to associate color with each entry on the LED table with some inline style attributes: style=\"background-color: lightcoral;\" style=\"background-color: lightgreen;\" style=\"background-color: lightskyblue;\" Here is what the final result can look like:","title":"Final Touches"},{"location":"bootstrap/#data-visualization-methods","text":"We are able acquire tons of data with our DHT22 sensor, and potentially other sensor modules, however, currently they are not being recorded or visualized over time. We can create more advanced views of our data with yet another JavaScript framework called Chart.js . With Chart.js we can create good looking and interactive graphs of all types .","title":"Data Visualization Methods"},{"location":"firebase/","text":"Intro to Backend Development Written by Curtis Lee, pictures by Ravi Patel. Slides Fundamentals What is Full Stack? It boils down to three (3) concepts: Frontend software that the user sees and interacts with. Backend software that can handle specific requests and dynamically sends/recieves information to/from the user. Database that stores pretty much all information our app uses. There are endless configurations depending on the application. Sometimes, these components may be combined or further seperated to varying degrees. Regardless, all components must work together to produce a web app. Imagine a trinity of cards: Frontend , Backend , and Database . A developer that holds all three cards is said to have the \" Full Stack \", and thus can build a complete web app. What is Backend? In traditional web development, backend software runs the \"business logic\" of our app. For example, a basic workflow may be like this: The user fills out a login form on our app. The user's browser sends a login request + the credentials to the backend server. The backend recieves this information. The backend queries the database to see if the user exists. If the user exists, see if username & password match. If everything is correct, send our content back to the user. Otherwise, send an error message. Setting up a backend server is usually not easy. We would need to have extensive knowledge of setting up servers, networking, operating systems, and software. And that's before we even write any code, which may also require mastering multiple programming languages! This is not feasible without the proper expertise and lots of time. So we will not be doing that. Instead, we will leverage Cloud Services that do the hard work for us, so we can better focus on our ideas. Intro to Firebase Quote Firebase is Backend as a Service ( BaaS ) by Google. Firebase is Google's solution to the problem. Firebase has reduced the entire Backend + Database stack into simpler services that we can rent out. Essentially, we are outsourcing all the hard technical work to Google. Getting Started Using Firebase is comparable to using any other Google cloud service like Gmail or Drive. First, we create a Project for our product. Then we can add different services such as Realtime Database or Authentication and create keys to be used by one or more Apps utilizng our Project's services. Creating a Project Sign in to firebase.google.com (feel free to use your UCSD account) Click Go to Console in the top right corner. Click Add Project . Fill out the forms and continue. Any name is ok. I recommend ECE196-Fall2020-IOT-YourName . Google Analytics is optional. We won't be using it, but it could be nice to have if we further develop the app later. Accept terms and conditions. Once everything is set up, it should look something similar to this. Adding Collaborators To add collaborators to the project, click on the Settings icon located on the top left. Select Users and permissions . Click the Add member button. As for roles, select either Owner or Editor . This can always be changed later. Once the member is added, they should receive an email invitation to join. Realtime Database Choosing a Database Firebase offers two different products for our Database needs. For the Free Plan as of 2020, here are the key similarities and differences: Spec Realtime Firestore Type NoSQL NoSQL Structure Basic JSON Documents & Collections Storage 10 GB 10 GB Bandwidth 10GiB/month 10GiB/month Simultaneous Connections 100 max No limit Document writes No limit 20K/day Document reads No limit 50K/day Document deletes No limit 20K/day Read More Cloud Firestore vs Realtime Database Firebase Pricing plans SQL vs NoSQL For our application, we will pick Realtime Database , for these reasons: Basic JSON structure is easy to learn Not many users, but document I/O adds up fast. Creating a Database Open the Realtime Database service on the sidebar: Start in Test Mode . Click on the Rules tab and verify read and write access is set to true . Obtaining Keys Adding a Service Account To connect our Raspberry Pi to Firebase, we need to generate a Service Account key to use Firebase Admin SDK. Click on the project's Settings icon and click on Project Settings Navigate to the Service Accounts tab. Click Generate new Private Key . Save this project key somewhere where we can later copy it to the Raspberry Pi. Warning Your private key gives access to your project's Firebase services. Keep it confidential and never store it in a public repository. Store this file securely, because your new key can't be recovered if lost. If using Git, always add the name of this file to the project's .gitignore. Adding an App Also in Settings , under General tab and Your Apps section, click Add App . Select the Web platform. Fill out the form Any name is ok. I recommend Web App . We won't be using Firebase Hosting for now. (instead we'll use GitHub Pages later on) It should now spit out some info under Add Firebase SDK . The important part we care about is the var firebaseConfig dictionary. We can always come back to view this information anytime. const firebaseConfig = { apiKey: ... authDomain: ... databaseURL: ... projectId: ... storageBucket: ... messagingSenderId: ... appId: ... measurementId: ... }; We won't need this App key until the Frontend portion. Info Technically, none of the var firebaseConfig fields are sensitive information. In fact, this information will later be necessary for the end user to access our app. It is OK to commit this to the Git repository. Connecting to Firebase To send data to the cloud, our Raspberry Pi needs to connect to Firebase. We first import the libraries and initialize Firebase Admin: import firebase_admin from firebase_admin import credentials cred = credentials.Certificate( 'PATH_TO_FIREBASE_KEY' ) firebase_admin.initialize_app( cred, { 'databaseURL': 'LINK_TO_DATABASE_URL' } ) replace PATH_TO_FIREBASE_KEY with the appropriate path replace LINK_TO_DATABASE_URL with the appropriate URL We also need to import the library for database and get a Reference. from firebase_admin import db db_ref = db.reference( \"PATH_TO_REFERENCE\" ) db_ref.set( VALUE ) data = db_ref.get() replace PATH_TO_REFERENCE with the appropriate path replace VALUE with the appropriate value Complete Code Should look similar to this: import firebase_admin from firebase_admin import credentials from firebase_admin import db import adafruit_dht import board import time dht_pin = board.D4 dht_sensor = adafruit_dht.DHT22(dht_pin) cred = credentials.Certificate( 'PATH_TO_FIREBASE_KEY' ) firebase_admin.initialize_app( cred, { 'databaseURL': 'LINK_TO_DATABASE_URL' } ) while True: temp = dht_sensor.temperature hum = dht_sensor.humidity print(\"Temperature =\", temp, 'C') print(\"Humidity =\", hum, '%') temp_ref = db.reference( \"sensor/temperature\" ) temp_ref.set( temp ) hum_ref = db.reference( \"sensor/humidity\" ) hum_ref.set( hum ) time.sleep( 10 )","title":"Firebase"},{"location":"firebase/#intro-to-backend-development","text":"Written by Curtis Lee, pictures by Ravi Patel.","title":"Intro to Backend Development"},{"location":"firebase/#slides","text":"","title":"Slides"},{"location":"firebase/#fundamentals","text":"","title":"Fundamentals"},{"location":"firebase/#what-is-full-stack","text":"It boils down to three (3) concepts: Frontend software that the user sees and interacts with. Backend software that can handle specific requests and dynamically sends/recieves information to/from the user. Database that stores pretty much all information our app uses. There are endless configurations depending on the application. Sometimes, these components may be combined or further seperated to varying degrees. Regardless, all components must work together to produce a web app. Imagine a trinity of cards: Frontend , Backend , and Database . A developer that holds all three cards is said to have the \" Full Stack \", and thus can build a complete web app.","title":"What is Full Stack?"},{"location":"firebase/#what-is-backend","text":"In traditional web development, backend software runs the \"business logic\" of our app. For example, a basic workflow may be like this: The user fills out a login form on our app. The user's browser sends a login request + the credentials to the backend server. The backend recieves this information. The backend queries the database to see if the user exists. If the user exists, see if username & password match. If everything is correct, send our content back to the user. Otherwise, send an error message. Setting up a backend server is usually not easy. We would need to have extensive knowledge of setting up servers, networking, operating systems, and software. And that's before we even write any code, which may also require mastering multiple programming languages! This is not feasible without the proper expertise and lots of time. So we will not be doing that. Instead, we will leverage Cloud Services that do the hard work for us, so we can better focus on our ideas.","title":"What is Backend?"},{"location":"firebase/#intro-to-firebase","text":"Quote Firebase is Backend as a Service ( BaaS ) by Google. Firebase is Google's solution to the problem. Firebase has reduced the entire Backend + Database stack into simpler services that we can rent out. Essentially, we are outsourcing all the hard technical work to Google.","title":"Intro to Firebase"},{"location":"firebase/#getting-started","text":"Using Firebase is comparable to using any other Google cloud service like Gmail or Drive. First, we create a Project for our product. Then we can add different services such as Realtime Database or Authentication and create keys to be used by one or more Apps utilizng our Project's services.","title":"Getting Started"},{"location":"firebase/#creating-a-project","text":"Sign in to firebase.google.com (feel free to use your UCSD account) Click Go to Console in the top right corner. Click Add Project . Fill out the forms and continue. Any name is ok. I recommend ECE196-Fall2020-IOT-YourName . Google Analytics is optional. We won't be using it, but it could be nice to have if we further develop the app later. Accept terms and conditions. Once everything is set up, it should look something similar to this.","title":"Creating a Project"},{"location":"firebase/#adding-collaborators","text":"To add collaborators to the project, click on the Settings icon located on the top left. Select Users and permissions . Click the Add member button. As for roles, select either Owner or Editor . This can always be changed later. Once the member is added, they should receive an email invitation to join.","title":"Adding Collaborators"},{"location":"firebase/#realtime-database","text":"","title":"Realtime Database"},{"location":"firebase/#choosing-a-database","text":"Firebase offers two different products for our Database needs. For the Free Plan as of 2020, here are the key similarities and differences: Spec Realtime Firestore Type NoSQL NoSQL Structure Basic JSON Documents & Collections Storage 10 GB 10 GB Bandwidth 10GiB/month 10GiB/month Simultaneous Connections 100 max No limit Document writes No limit 20K/day Document reads No limit 50K/day Document deletes No limit 20K/day Read More Cloud Firestore vs Realtime Database Firebase Pricing plans SQL vs NoSQL For our application, we will pick Realtime Database , for these reasons: Basic JSON structure is easy to learn Not many users, but document I/O adds up fast.","title":"Choosing a Database"},{"location":"firebase/#creating-a-database","text":"Open the Realtime Database service on the sidebar: Start in Test Mode . Click on the Rules tab and verify read and write access is set to true .","title":"Creating a Database"},{"location":"firebase/#obtaining-keys","text":"","title":"Obtaining Keys"},{"location":"firebase/#adding-a-service-account","text":"To connect our Raspberry Pi to Firebase, we need to generate a Service Account key to use Firebase Admin SDK. Click on the project's Settings icon and click on Project Settings Navigate to the Service Accounts tab. Click Generate new Private Key . Save this project key somewhere where we can later copy it to the Raspberry Pi. Warning Your private key gives access to your project's Firebase services. Keep it confidential and never store it in a public repository. Store this file securely, because your new key can't be recovered if lost. If using Git, always add the name of this file to the project's .gitignore.","title":"Adding a Service Account"},{"location":"firebase/#adding-an-app","text":"Also in Settings , under General tab and Your Apps section, click Add App . Select the Web platform. Fill out the form Any name is ok. I recommend Web App . We won't be using Firebase Hosting for now. (instead we'll use GitHub Pages later on) It should now spit out some info under Add Firebase SDK . The important part we care about is the var firebaseConfig dictionary. We can always come back to view this information anytime. const firebaseConfig = { apiKey: ... authDomain: ... databaseURL: ... projectId: ... storageBucket: ... messagingSenderId: ... appId: ... measurementId: ... }; We won't need this App key until the Frontend portion. Info Technically, none of the var firebaseConfig fields are sensitive information. In fact, this information will later be necessary for the end user to access our app. It is OK to commit this to the Git repository.","title":"Adding an App"},{"location":"firebase/#connecting-to-firebase","text":"To send data to the cloud, our Raspberry Pi needs to connect to Firebase. We first import the libraries and initialize Firebase Admin: import firebase_admin from firebase_admin import credentials cred = credentials.Certificate( 'PATH_TO_FIREBASE_KEY' ) firebase_admin.initialize_app( cred, { 'databaseURL': 'LINK_TO_DATABASE_URL' } ) replace PATH_TO_FIREBASE_KEY with the appropriate path replace LINK_TO_DATABASE_URL with the appropriate URL We also need to import the library for database and get a Reference. from firebase_admin import db db_ref = db.reference( \"PATH_TO_REFERENCE\" ) db_ref.set( VALUE ) data = db_ref.get() replace PATH_TO_REFERENCE with the appropriate path replace VALUE with the appropriate value","title":"Connecting to Firebase"},{"location":"firebase/#complete-code","text":"Should look similar to this: import firebase_admin from firebase_admin import credentials from firebase_admin import db import adafruit_dht import board import time dht_pin = board.D4 dht_sensor = adafruit_dht.DHT22(dht_pin) cred = credentials.Certificate( 'PATH_TO_FIREBASE_KEY' ) firebase_admin.initialize_app( cred, { 'databaseURL': 'LINK_TO_DATABASE_URL' } ) while True: temp = dht_sensor.temperature hum = dht_sensor.humidity print(\"Temperature =\", temp, 'C') print(\"Humidity =\", hum, '%') temp_ref = db.reference( \"sensor/temperature\" ) temp_ref.set( temp ) hum_ref = db.reference( \"sensor/humidity\" ) hum_ref.set( hum ) time.sleep( 10 )","title":"Complete Code"},{"location":"graphs/","text":"","title":"Graphs"},{"location":"iot-project/","text":"ECE 196 but from Fall 2020 Requirements This project requires the following items: Raspberry Pi kit Some kind of web browser and terminal access VSCode (or equivalent) for code editor Python for both Pi scripts and quick webserver on PC Git to use Github Pages Github Account to use Github Pages Google Account to use Firebase Introduction Slides Web App Demo See the website demo Helpful Links w3schools.com HTML CSS JavaScript Python Bootstrap VueJS Documentation Bootstrap Documentation Firebase Realtime Database Firebase Authentication","title":"IOT Intro"},{"location":"iot-project/#ece-196-but-from-fall-2020","text":"","title":"ECE 196 but from Fall 2020"},{"location":"iot-project/#requirements","text":"This project requires the following items: Raspberry Pi kit Some kind of web browser and terminal access VSCode (or equivalent) for code editor Python for both Pi scripts and quick webserver on PC Git to use Github Pages Github Account to use Github Pages Google Account to use Firebase","title":"Requirements"},{"location":"iot-project/#introduction-slides","text":"","title":"Introduction Slides"},{"location":"iot-project/#web-app-demo","text":"See the website demo","title":"Web App Demo"},{"location":"iot-project/#helpful-links","text":"w3schools.com HTML CSS JavaScript Python Bootstrap VueJS Documentation Bootstrap Documentation Firebase Realtime Database Firebase Authentication","title":"Helpful Links"},{"location":"lasercut/","text":"Written by Dillon Hicks Laser Cutting Introduction Laser Cutting Assignment Question Laser Cutting Assignment - Nametag and Box Makerspace Quiz 1. Complete the ECE Makespace Laser Cutting Quiz (You will be unable to laser cut your parts below if you do not complete this quiz) 1.5. If you are unfamiliar with designing lasercut parts, please follow this Inkscape tutorial Nametag 2. Create a cool lasercut nametag so we can learn each other's names quicker! The nametag must be: At least 2.5 inches across Rounded Edges .5 x .25 in hole for badge clip (we will provide the badge clip after your nametag is cut) The following needs to be engraved: Your Name + some other text An engraved image/shape/cool design Engraved border Design Example Cut Example Box 3. In order to keep your nametag safe in your backpack, also design a box to hold your nametag. This box must be constructed using one of the following: Finger joint Mortise and Tenon joint T-slot joint Note that our materials used in the makerspace are either 0.25 inches or 0.125 inches in thickness, so use this information to design your nametag and box. Submit both of these designs in .svg format and ensure that your design meets all of these requirements! The nametag must be cut in the makerspace as well, the box does not. WI22 Note: Since we are unable to cut this in the first two weeks, we will cut the nametag when we are able to return in the makerspace. The design is still due by the due date mentioned in class","title":"Laser Cutting"},{"location":"lasercut/#laser-cutting-introduction","text":"","title":"Laser Cutting Introduction"},{"location":"lasercut/#laser-cutting-assignment","text":"Question Laser Cutting Assignment - Nametag and Box","title":"Laser Cutting Assignment"},{"location":"lasercut/#makerspace-quiz","text":"1. Complete the ECE Makespace Laser Cutting Quiz (You will be unable to laser cut your parts below if you do not complete this quiz) 1.5. If you are unfamiliar with designing lasercut parts, please follow this Inkscape tutorial","title":"Makerspace Quiz"},{"location":"lasercut/#nametag","text":"2. Create a cool lasercut nametag so we can learn each other's names quicker! The nametag must be: At least 2.5 inches across Rounded Edges .5 x .25 in hole for badge clip (we will provide the badge clip after your nametag is cut) The following needs to be engraved: Your Name + some other text An engraved image/shape/cool design Engraved border Design Example Cut Example","title":"Nametag"},{"location":"lasercut/#box","text":"3. In order to keep your nametag safe in your backpack, also design a box to hold your nametag. This box must be constructed using one of the following: Finger joint Mortise and Tenon joint T-slot joint Note that our materials used in the makerspace are either 0.25 inches or 0.125 inches in thickness, so use this information to design your nametag and box. Submit both of these designs in .svg format and ensure that your design meets all of these requirements! The nametag must be cut in the makerspace as well, the box does not. WI22 Note: Since we are unable to cut this in the first two weeks, we will cut the nametag when we are able to return in the makerspace. The design is still due by the due date mentioned in class","title":"Box"},{"location":"opencv/","text":"ECE 196 Intro to OpenCV Written by Dillon Hicks Quote What is OpenCV? OpenCV is a library of programming functions mainly aimed at real-time computer vision (CV) Requirements Laptop with Anaconda installed and a webcam OR RPi with camera attached Slides Setup Before we get started, we need to set up all of the libraries necessary for this lecture. With your conda environment activated, install the necesary dependencies by typing the below coimmands into your terminal window. OpenCV pip install opencv-contrib-python imutils (image utility module from Adrian Rosebrock - https://www.pyimagesearch.com) pip install imutils NumPy (For efficient multi-dimensional python arrays) pip install numpy To test these installations, create a new python script and run it with the following import statements: import cv2 import imutils import numpy as np Info When installing OpenCV from pip , we get the default version, which doesn't have many useful add-ons such as CUDA-acceleration (Nvidia GPU acceleration). We can compile OpenCV from directly from source, but this installation takes a very long time (hours in many cases). However, compiling from source may be preferable when GPU acceleration is available to speed up processing times. Operating on Images The first obvious step for basic computer vision functions is opening single images. There are some functions that make this very easy to do. For this guide we will use this sample image: Opening Images You can read an image from you computer into python as a numpy array using imread() . We can then do any numpy operations that you could normally do on this array. #Loads an image with filename name into my_image my_image = cv2 . imread ( name ) We can then open this image in a separate window using imshow() . #Opens a new window titled \"Image\", displaying my_image cv2 . imshow ( \"Image\" , my_image ) You may then notice that it is a bit tough to close this window. To close this window easily, you can set a wait key using waitKey() , and close OpenCV windows using destroyAllWindows() . If this wait key is pressed, then the next line will run and all windows will be destroyed (closed) #If q is pressed during x milliseconds wait time, close all opencv windows x = 0 if cv2 . waitKey ( x ) & 0xFF == ord ( 'q' ): cv2 . destroyAllWindows () Warning For WSL (Windows Subsystem for Linux), you may get errors when plotting using imshow() as GUI apps are not currently supported unless you are on the newest version of WSL and have the proper drivers installed. It is recomended that your native OS is used for compatibility with camera hardware. Make sure you update WSL and the prerequisite drivers Capturing Video We can also create a video source as well for us to read videos from the onboard camera. We can first make a video object using VideoCapture() from which to grab frames from at every iteration of a while loops using read() . Combining this with imshow() and other flow control functions, we can display images from our camera feed. #The following recipe gets a numpy array at each iteration of the while loop video = cv2 . VideoCapture ( 0 ) while True : ret , frame = video . read () # Display the resulting frame cv2 . imshow ( 'image' , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cv2 . destroyAllWindows () Warning If you try to run the code above on a RPi using the RPi camera, it will not work by default. Make sure to enable the camera by following the following steps: Enable the camera using sudo-raspi-config Install picamera using pip install \"picamera[array]\" and use the picamera functions for reading pictures For a more detailed tutorial, use this link Drawing on images In addition, you can also resize an image to more easily display it, or reduce computation time for smaller images. From Adrian Rosebrock's library imutils, we can resize an image to a width of pixels with pixels = 360 imutils . resize ( my_image , pixels ) In addition, we can also place shapes onto images using several built in functions. Below, we use the circle() and rectangle() functions, but many more are available in this OpenCV documentation #places a green circle at (100,100) with r = 25 with a thickness of 10 pixels cv2 . circle ( my_image , ( 100 , 100 ), 25 , ( 0 , 255 , 0 ), 10 ) cv2 . rectangle ( my_image , ( 400 , 300 ), ( 500 , 400 ), ( 0 , 0 , 255 ), 10 ) Text To add more information to images, we can also add text. This is fairly easy to do as we can simply get a font built into OpenCV, and putText() to place a given string at a location. font = cv2 . FONT_HERSHEY_DUPLEX cv2 . putText ( frame , text_string , location , font , fontscale , color , thickness ) For example, for the below image, the code used was: font = cv2 . FONT_HERSHEY_DUPLEX cv2 . putText ( frame , \"ECE 196 Rocks\" , ( 100 , 100 ), font , 1 , ( 0 , 255 , 0 ), 3 ) Question Exercise 1 Combine all of the following functions above to open an image and do some modifications to it! Open an image of your choice and show it in a window that you can close, Resize the image to 900 pixels wide Draw a rectangle at the center of the image, and place a line of text above that square Facial Detection Next up, let's go over basic Facial Detection . Facial detection is a fun task as it allows us to see if any faces are in our images. This is done using a Haar Cascade Classifier . This works by making many small ML classifiers that are then cascaded together to detect small visual features, such as those in the image below, for certain objects. These features are shown below for facial detection. In this case, these Haar Cascade Classifiers are trained to detect faces, but these classifiers can detect many different types of objects. Since we aren't worrying about ML portions in this lecture, we won't go too in to detail, but OpenCV allows us to implement these algorithms without knowing anything about ML to accomplish cool tasks! First, let's look at what XMLs built in to OpenCV can be used to detect faces. HAAR CASCADE XMLS Note From the above Github link, you may notice that there are many different trained models for different detection tasks. You can interchange these XMLs to accomplish many tasks, including body, eye, and face detection. faceCascade = cv2 . CascadeClassifier ( cv2 . data . haarcascades + 'haarcascade_frontalface_alt2.xml' ) Once we load the cascade classifier, we can then detect the faces, which are returned from the detectMultiScale function, from which we can get the top left corner and width and height of the bounding box around each detected object. faces = faceCascade . detectMultiScale ( frame ) for ( x , y , w , h ) in faces : #do something Question Exercise 2 Now it's time to do some cooler things! From your video source, detect the faces in each frame and place a rectangle around each face. Test that this works by detecting your face in your video. Hint: use cv2.rectangle and use the w , and h , the width and height, respectively, to offset the rectangle from the top corner. i.e. (x+w,y+h) If you have extra time, try to use some of the other Haar classifiers to detect different objects! Image Processing Although facial detection is an easy task to do with OpenCV, not all tasks are as straightforward. One task that is essential to any computer vision workflow is Image Processing . We process our images for one main reason, to make them easier for our algorithms we develop to analyze. One main way we can do this is to remove Noise . Noise is essentially unwanted data in our images, and this noise can greatly affect how our algorithms perform. Thus, it is essential to reduce the amount of noise in our images. Blur One important way to remove noise is Blurring . Standard intuition may tell you that blurring an image makes it worse, which to the naked eye, is true! However, the human brain is made to ignore small bits of noise in images, but computers are not . Blurring can get rid of small details that are ultimately unnecessary to the performance of our algorithms, limiting the ability of small details to \"trick\" our algorithms. One common blurring algorithm is the Gaussian Blur, which we will use in this lecture to \"smooth\" our image. For other blurring algorithms, feel free to check out this tutorial by Adrian Rosebrock #applied a gaussian blur with a standard deviation of 11 frame = cv2 . GaussianBlur ( frame , ( 11 , 11 ), 0 ) Unblurred Image Blurred Image Thresholding Thresholding can be used to create a mask We can also set an upper and lower boundary for our threshold. Thus, the output mask would be 0 if it is outside these lower and upper bounds, and 1 otherwise # Tuple containing 2 lists of BGR pixel values denoting minimum and maximum example red values boundaries = ([ 17 , 17 , 150 ], [ 125 , 125 , 255 ]) # Setting lower and upper bounds lower = np . array ( boundaries [ 0 ], dtype = \"uint8\" ) upper = np . array ( boundaries [ 1 ], dtype = \"uint8\" ) # Transforms the above boundaries into numpy arrays mask = cv2 . inRange ( frame , lower , upper ) Morpological Transformations Once we convert our images to masks, our ability to remove noise doesn't stop there, we can use Morpological Transformations , most notably, Erosions and Dilations to further remove noise in our mask. Original Image Dilated Image Eroded Image These morphological transformations work to change the images shape. They can remove noise, and further highlight useful features in our images. There are many other morphological Transformations available - see here . We can apply these transformations to our mask with the following code. #Applies an erosion, followed by a dilation with 3 iterations each (the more iterations, the stronger the transformation) mask = cv2 . erode ( mask , None , iterations = 3 ) mask = cv2 . dilate ( mask , None , iterations = 3 ) Mask without Morpological Transformations Mask with Morpological Transformations Contour Detection From the mask, we can get the contours of the mask, or the boundary of each masked object. contours = cv2 . findContours ( mask . copy (), cv2 . RETR_EXTERNAL , cv2 . CHAIN_APPROX_SIMPLE ) contours = imutils . grab_contours ( contours ) for contour in contours : cv2 . drawContours ( frame , contour , - 1 , ( 0 , 255 , 0 ), 3 ) Next, using minAreaRect() , we can get the minimum area rectangle that covers the contours. rect = cv2 . minAreaRect ( contour ) box = cv2 . boxPoints ( rect ) box = np . int0 ( box ) Question Exercise 3 Take the following image and detect the tennis balls! Apply a blur to the image Threshold the image. Erode, then dialte the image Plot a box around each tennis ball Extra: Experiment more with the thresholds and try it on a video! (Ask Dillon for a tennis ball) Original Image Detected Tennis Balls","title":"OpenCV"},{"location":"opencv/#ece-196-intro-to-opencv","text":"Written by Dillon Hicks Quote What is OpenCV? OpenCV is a library of programming functions mainly aimed at real-time computer vision (CV)","title":"ECE 196 Intro to OpenCV"},{"location":"opencv/#requirements","text":"Laptop with Anaconda installed and a webcam OR RPi with camera attached","title":"Requirements"},{"location":"opencv/#slides","text":"","title":"Slides"},{"location":"opencv/#setup","text":"Before we get started, we need to set up all of the libraries necessary for this lecture. With your conda environment activated, install the necesary dependencies by typing the below coimmands into your terminal window. OpenCV pip install opencv-contrib-python imutils (image utility module from Adrian Rosebrock - https://www.pyimagesearch.com) pip install imutils NumPy (For efficient multi-dimensional python arrays) pip install numpy To test these installations, create a new python script and run it with the following import statements: import cv2 import imutils import numpy as np Info When installing OpenCV from pip , we get the default version, which doesn't have many useful add-ons such as CUDA-acceleration (Nvidia GPU acceleration). We can compile OpenCV from directly from source, but this installation takes a very long time (hours in many cases). However, compiling from source may be preferable when GPU acceleration is available to speed up processing times.","title":"Setup"},{"location":"opencv/#operating-on-images","text":"The first obvious step for basic computer vision functions is opening single images. There are some functions that make this very easy to do. For this guide we will use this sample image:","title":"Operating on Images"},{"location":"opencv/#opening-images","text":"You can read an image from you computer into python as a numpy array using imread() . We can then do any numpy operations that you could normally do on this array. #Loads an image with filename name into my_image my_image = cv2 . imread ( name ) We can then open this image in a separate window using imshow() . #Opens a new window titled \"Image\", displaying my_image cv2 . imshow ( \"Image\" , my_image ) You may then notice that it is a bit tough to close this window. To close this window easily, you can set a wait key using waitKey() , and close OpenCV windows using destroyAllWindows() . If this wait key is pressed, then the next line will run and all windows will be destroyed (closed) #If q is pressed during x milliseconds wait time, close all opencv windows x = 0 if cv2 . waitKey ( x ) & 0xFF == ord ( 'q' ): cv2 . destroyAllWindows () Warning For WSL (Windows Subsystem for Linux), you may get errors when plotting using imshow() as GUI apps are not currently supported unless you are on the newest version of WSL and have the proper drivers installed. It is recomended that your native OS is used for compatibility with camera hardware. Make sure you update WSL and the prerequisite drivers","title":"Opening Images"},{"location":"opencv/#capturing-video","text":"We can also create a video source as well for us to read videos from the onboard camera. We can first make a video object using VideoCapture() from which to grab frames from at every iteration of a while loops using read() . Combining this with imshow() and other flow control functions, we can display images from our camera feed. #The following recipe gets a numpy array at each iteration of the while loop video = cv2 . VideoCapture ( 0 ) while True : ret , frame = video . read () # Display the resulting frame cv2 . imshow ( 'image' , frame ) if cv2 . waitKey ( 1 ) & 0xFF == ord ( 'q' ): break cv2 . destroyAllWindows () Warning If you try to run the code above on a RPi using the RPi camera, it will not work by default. Make sure to enable the camera by following the following steps: Enable the camera using sudo-raspi-config Install picamera using pip install \"picamera[array]\" and use the picamera functions for reading pictures For a more detailed tutorial, use this link","title":"Capturing Video"},{"location":"opencv/#drawing-on-images","text":"In addition, you can also resize an image to more easily display it, or reduce computation time for smaller images. From Adrian Rosebrock's library imutils, we can resize an image to a width of pixels with pixels = 360 imutils . resize ( my_image , pixels ) In addition, we can also place shapes onto images using several built in functions. Below, we use the circle() and rectangle() functions, but many more are available in this OpenCV documentation #places a green circle at (100,100) with r = 25 with a thickness of 10 pixels cv2 . circle ( my_image , ( 100 , 100 ), 25 , ( 0 , 255 , 0 ), 10 ) cv2 . rectangle ( my_image , ( 400 , 300 ), ( 500 , 400 ), ( 0 , 0 , 255 ), 10 )","title":"Drawing on images"},{"location":"opencv/#text","text":"To add more information to images, we can also add text. This is fairly easy to do as we can simply get a font built into OpenCV, and putText() to place a given string at a location. font = cv2 . FONT_HERSHEY_DUPLEX cv2 . putText ( frame , text_string , location , font , fontscale , color , thickness ) For example, for the below image, the code used was: font = cv2 . FONT_HERSHEY_DUPLEX cv2 . putText ( frame , \"ECE 196 Rocks\" , ( 100 , 100 ), font , 1 , ( 0 , 255 , 0 ), 3 ) Question Exercise 1 Combine all of the following functions above to open an image and do some modifications to it! Open an image of your choice and show it in a window that you can close, Resize the image to 900 pixels wide Draw a rectangle at the center of the image, and place a line of text above that square","title":"Text"},{"location":"opencv/#facial-detection","text":"Next up, let's go over basic Facial Detection . Facial detection is a fun task as it allows us to see if any faces are in our images. This is done using a Haar Cascade Classifier . This works by making many small ML classifiers that are then cascaded together to detect small visual features, such as those in the image below, for certain objects. These features are shown below for facial detection. In this case, these Haar Cascade Classifiers are trained to detect faces, but these classifiers can detect many different types of objects. Since we aren't worrying about ML portions in this lecture, we won't go too in to detail, but OpenCV allows us to implement these algorithms without knowing anything about ML to accomplish cool tasks! First, let's look at what XMLs built in to OpenCV can be used to detect faces. HAAR CASCADE XMLS Note From the above Github link, you may notice that there are many different trained models for different detection tasks. You can interchange these XMLs to accomplish many tasks, including body, eye, and face detection. faceCascade = cv2 . CascadeClassifier ( cv2 . data . haarcascades + 'haarcascade_frontalface_alt2.xml' ) Once we load the cascade classifier, we can then detect the faces, which are returned from the detectMultiScale function, from which we can get the top left corner and width and height of the bounding box around each detected object. faces = faceCascade . detectMultiScale ( frame ) for ( x , y , w , h ) in faces : #do something Question Exercise 2 Now it's time to do some cooler things! From your video source, detect the faces in each frame and place a rectangle around each face. Test that this works by detecting your face in your video. Hint: use cv2.rectangle and use the w , and h , the width and height, respectively, to offset the rectangle from the top corner. i.e. (x+w,y+h) If you have extra time, try to use some of the other Haar classifiers to detect different objects!","title":"Facial Detection"},{"location":"opencv/#image-processing","text":"Although facial detection is an easy task to do with OpenCV, not all tasks are as straightforward. One task that is essential to any computer vision workflow is Image Processing . We process our images for one main reason, to make them easier for our algorithms we develop to analyze. One main way we can do this is to remove Noise . Noise is essentially unwanted data in our images, and this noise can greatly affect how our algorithms perform. Thus, it is essential to reduce the amount of noise in our images.","title":"Image Processing"},{"location":"opencv/#blur","text":"One important way to remove noise is Blurring . Standard intuition may tell you that blurring an image makes it worse, which to the naked eye, is true! However, the human brain is made to ignore small bits of noise in images, but computers are not . Blurring can get rid of small details that are ultimately unnecessary to the performance of our algorithms, limiting the ability of small details to \"trick\" our algorithms. One common blurring algorithm is the Gaussian Blur, which we will use in this lecture to \"smooth\" our image. For other blurring algorithms, feel free to check out this tutorial by Adrian Rosebrock #applied a gaussian blur with a standard deviation of 11 frame = cv2 . GaussianBlur ( frame , ( 11 , 11 ), 0 ) Unblurred Image Blurred Image","title":"Blur"},{"location":"opencv/#thresholding","text":"Thresholding can be used to create a mask We can also set an upper and lower boundary for our threshold. Thus, the output mask would be 0 if it is outside these lower and upper bounds, and 1 otherwise # Tuple containing 2 lists of BGR pixel values denoting minimum and maximum example red values boundaries = ([ 17 , 17 , 150 ], [ 125 , 125 , 255 ]) # Setting lower and upper bounds lower = np . array ( boundaries [ 0 ], dtype = \"uint8\" ) upper = np . array ( boundaries [ 1 ], dtype = \"uint8\" ) # Transforms the above boundaries into numpy arrays mask = cv2 . inRange ( frame , lower , upper )","title":"Thresholding"},{"location":"opencv/#morpological-transformations","text":"Once we convert our images to masks, our ability to remove noise doesn't stop there, we can use Morpological Transformations , most notably, Erosions and Dilations to further remove noise in our mask. Original Image Dilated Image Eroded Image These morphological transformations work to change the images shape. They can remove noise, and further highlight useful features in our images. There are many other morphological Transformations available - see here . We can apply these transformations to our mask with the following code. #Applies an erosion, followed by a dilation with 3 iterations each (the more iterations, the stronger the transformation) mask = cv2 . erode ( mask , None , iterations = 3 ) mask = cv2 . dilate ( mask , None , iterations = 3 ) Mask without Morpological Transformations Mask with Morpological Transformations","title":"Morpological Transformations"},{"location":"opencv/#contour-detection","text":"From the mask, we can get the contours of the mask, or the boundary of each masked object. contours = cv2 . findContours ( mask . copy (), cv2 . RETR_EXTERNAL , cv2 . CHAIN_APPROX_SIMPLE ) contours = imutils . grab_contours ( contours ) for contour in contours : cv2 . drawContours ( frame , contour , - 1 , ( 0 , 255 , 0 ), 3 ) Next, using minAreaRect() , we can get the minimum area rectangle that covers the contours. rect = cv2 . minAreaRect ( contour ) box = cv2 . boxPoints ( rect ) box = np . int0 ( box ) Question Exercise 3 Take the following image and detect the tennis balls! Apply a blur to the image Threshold the image. Erode, then dialte the image Plot a box around each tennis ball Extra: Experiment more with the thresholds and try it on a video! (Ask Dillon for a tennis ball) Original Image Detected Tennis Balls","title":"Contour Detection"},{"location":"python/","text":"Written by Dillon Hicks Variables and Types Types As you may have seen in other coding languages, different variables have different types. Some of the types we will go over shortly are: Integers and Floats ( int , float ) Whole digits and decimals Strings ( str ) Text Data, (We will talk more about strings in the next section) Booleans ( bool ) True and False variables Python has many different types, including many different data structures that are incredibly useful, but we will start with these for a basis of your Python knowledge. Variables We can save data of these types with variables . Variables are set with the variable name on the left of the = , and the data you want to set as the variable on the right. variable_name = some_data Numbers can be saved into a variable var as such: Integers: var = 1 Floats: var = 1.0 Note that floats have a decimal place. These decimals are stored with IEEE 754-2008 precision, commonly known as a double Strings can be saved with text between single or double quotes var = 'ECE 196' var = \"ECE 196\" You can even create multiline strings with triple quotes . Booleans variables can be set with True or False , note that True and False are capitalized. var = True var = False Printing As you have seen in many other coding languages, outputting the values of variables can be a very useful way to debug your code and provide feedback to your user of your program. Luckily, this is easy to do in Python, you can simply use the print operator. For example, if the variable a is holding the number 2 , we can print this variable simply with >>> print ( a ) 2 This is much shorter than other languages for example: C++ : cout >> a; Java : System.out.println(a) This is one big advantage of python - the code is very readable and succinct! Types You can get the type of any variable with the type() function a = 2 type_a = type ( a ) # prints type_a, should print int print ( type_a ) b = \"ECE 196\" type_b = type ( b ) # prints type_a, should print str print ( type_b ) This can useful if you want to check what type your data is before you do some operations. For example, say you want to square a number, you can first check if the variable is a number before you square it so your program doesn't crash. Basic Operations Number Operations You can do basic arithmetic with these numbers with the following operators. These operators are used similarly to other languages, and follow PEMDAS order. Operator Operation Examples + Addition 1 + 2 = 3 - Subtraction 1 - 2 = -1 * Multiplication 2 * 2 = 4 / Division 1 / 2 = 0.5 % Modulus 5 % 2 = 1 ** Exponent 8 ** 2 = 64 // Floor Division 10 // 3 = 3 For example, you can use these below as such: a = 1 + 2 # Should print 3 print ( a ) b = 8 ** 2 # Should print 64 print ( b ) Boolean Operations You can use and , or , and nor to compare two different boolean variables. If you are not familiar with how boolean logic operations such as and, or, and nor operate, please check out this wikipedia article on logic gates and If both variables are True return True or If one or more of the two variables are True return True not If variable is True, return False, if False, return True Boolean operations, like Python arithmetic operations, follow an order of operations. Python first evaluates not , then and , and lastly or if the operations are given in a single line. Below is an example of how boolean operations can be used in your code: t_var = True f_var = False #Should print False, since the pair is not (True, True) print ( t_var and f_var ) #Should print True, since one of the values in the pair are True print ( t_var or f_var ) #Should print False, since not True is False print ( not ( t_Var )) In addition, we can use boolean comparison operators . These can be used between numbers to compare their values. The order of operations for these operators is left to right . Operator Operation == Equal to != Not equal to < Less than > Greater than <= Less than or equal to >= Greater than or equal to Below is an example of how these comparison operations can be used: a = 10 b = 13 # Should print False, 10 is not equal to 13 print ( a == b ) # Should print True, 10 is not equal to 13 print ( a != b ) # Should print False, 10 is not greater than 13 print ( a > b ) # Should print True, 10 is less than 13 print ( a < b ) Conditionals Whitespace One thing that we haven't mentioned yet, but is a very important aspect of python is Whitespace . Whitespace is the area taken up in your code by lines, spaces, and tabs. In many languages, the amount of space and linebreaks you put between statements doesn't really matter. With these other languages, you can format code however you want; tabs, spaces, newlines, can be essentially up to you. However, in python, this is not the case. Tabs, newlines, and spaces are very important, and improper uses of whitespace can result in errors, more specifically IndentationError . Whitespace is important in the next few sections, so make sure to keep in mind that Whitespace in python is important. If, else if, else You may have seen conditionals in other coding languages before, but conditionals in python work similarly as other languages, but with the caveat of whitespace. Conditionals will run the code indented underneath them if the condition is met. Conditionals can be used in python with if , elif , and else . if will run the code indented under it if the statement, followed by a colon, is evaluated to True bool_var = True #Can alternatively use if bool_var: if bool_var == True : print ( \"Your variable is True\" ) elif is short for else if. If the if statement and all other elif statements above it at the same indentation level all evaluate to false, and the statement in the elif statement is evaluated to True , then the code under that elif statement will run. elif must be followed by an if statement or another elif statement. The definition of the elif is a bit confusing, but if you are familiar with else if from other languages, or use it, it is fairly easy to understand! if bool_var == False : print ( \"Your variable is False\" ) elif bool_var == True : print ( \"Your variable is True\" ) else statements will evaluate if the if statement and elif statements above it at the same indentation level all evaluate to False . else must follow a previous if statement and all other elif statements. With this, we can see how all of these conditional statements can be chained together to do different things. bool_var = True if bool_var == False : print ( \"Your variable is False\" ) elif bool_var == None : print ( \"Your variable is None\" ) else : print ( \"Your variable is neither False nor None\" ) Hint You might be wondering why these operations are useful, so we will be going over an example you might use in your projects. Let's say you want to read when a button is being pressed, and do something on that button press. Let's say that when your button is being held down, the on_press variable is True , False otherwise. If you want to do something on this button press, you can simply use the conditional if on_press : # Do something You can even chain this together with multiple buttons, for example if two variables are set by two buttons, on_press_1 and on_press_2 respectively, if you want to do something when only related to only one button when it is pressed, you can use the following: if on_press_1 != on_press_2 : if on_press_1 : # Do something elif on_press_2 : # Do something Now onto the problem... [Problem 2] Microcontroller Testing Question You have a python microcontroller that has very sensitive electronics attached and you want to ensure that your microcontroller is recieving a proper power source. Your microcontroller can detect the amperage and voltage of the electricity, however, your electronics attached say that your microcontroller needs between 12 and 13 watts. As a good ECE 35 student you of course know that the wattage can be calculated with wattage = amperage * voltage . Using a measurement for the amperage and voltage given to your microcontroller, print \"Too little power\", if the wattage is below 12, \"Too much power\", if the wattage is above 13, and \"Sufficient power\" otherwise. Hint: use boolean comparison operators and conditionals #SKELETON CODE # Given voltage (v) and amperage (a) (keep in mind the values are here for reference, this should work for any set of voltage and amperage) v = 4.9 a = 2.1 # YOUR CODE BELOW # ...","title":"Syntax Basics"},{"location":"python/#variables-and-types","text":"","title":"Variables and Types"},{"location":"python/#types","text":"As you may have seen in other coding languages, different variables have different types. Some of the types we will go over shortly are: Integers and Floats ( int , float ) Whole digits and decimals Strings ( str ) Text Data, (We will talk more about strings in the next section) Booleans ( bool ) True and False variables Python has many different types, including many different data structures that are incredibly useful, but we will start with these for a basis of your Python knowledge.","title":"Types"},{"location":"python/#variables","text":"We can save data of these types with variables . Variables are set with the variable name on the left of the = , and the data you want to set as the variable on the right. variable_name = some_data Numbers can be saved into a variable var as such: Integers: var = 1 Floats: var = 1.0 Note that floats have a decimal place. These decimals are stored with IEEE 754-2008 precision, commonly known as a double Strings can be saved with text between single or double quotes var = 'ECE 196' var = \"ECE 196\" You can even create multiline strings with triple quotes . Booleans variables can be set with True or False , note that True and False are capitalized. var = True var = False","title":"Variables"},{"location":"python/#printing","text":"As you have seen in many other coding languages, outputting the values of variables can be a very useful way to debug your code and provide feedback to your user of your program. Luckily, this is easy to do in Python, you can simply use the print operator. For example, if the variable a is holding the number 2 , we can print this variable simply with >>> print ( a ) 2 This is much shorter than other languages for example: C++ : cout >> a; Java : System.out.println(a) This is one big advantage of python - the code is very readable and succinct!","title":"Printing"},{"location":"python/#types_1","text":"You can get the type of any variable with the type() function a = 2 type_a = type ( a ) # prints type_a, should print int print ( type_a ) b = \"ECE 196\" type_b = type ( b ) # prints type_a, should print str print ( type_b ) This can useful if you want to check what type your data is before you do some operations. For example, say you want to square a number, you can first check if the variable is a number before you square it so your program doesn't crash.","title":"Types"},{"location":"python/#basic-operations","text":"","title":"Basic Operations"},{"location":"python/#number-operations","text":"You can do basic arithmetic with these numbers with the following operators. These operators are used similarly to other languages, and follow PEMDAS order. Operator Operation Examples + Addition 1 + 2 = 3 - Subtraction 1 - 2 = -1 * Multiplication 2 * 2 = 4 / Division 1 / 2 = 0.5 % Modulus 5 % 2 = 1 ** Exponent 8 ** 2 = 64 // Floor Division 10 // 3 = 3 For example, you can use these below as such: a = 1 + 2 # Should print 3 print ( a ) b = 8 ** 2 # Should print 64 print ( b )","title":"Number Operations"},{"location":"python/#boolean-operations","text":"You can use and , or , and nor to compare two different boolean variables. If you are not familiar with how boolean logic operations such as and, or, and nor operate, please check out this wikipedia article on logic gates and If both variables are True return True or If one or more of the two variables are True return True not If variable is True, return False, if False, return True Boolean operations, like Python arithmetic operations, follow an order of operations. Python first evaluates not , then and , and lastly or if the operations are given in a single line. Below is an example of how boolean operations can be used in your code: t_var = True f_var = False #Should print False, since the pair is not (True, True) print ( t_var and f_var ) #Should print True, since one of the values in the pair are True print ( t_var or f_var ) #Should print False, since not True is False print ( not ( t_Var )) In addition, we can use boolean comparison operators . These can be used between numbers to compare their values. The order of operations for these operators is left to right . Operator Operation == Equal to != Not equal to < Less than > Greater than <= Less than or equal to >= Greater than or equal to Below is an example of how these comparison operations can be used: a = 10 b = 13 # Should print False, 10 is not equal to 13 print ( a == b ) # Should print True, 10 is not equal to 13 print ( a != b ) # Should print False, 10 is not greater than 13 print ( a > b ) # Should print True, 10 is less than 13 print ( a < b )","title":"Boolean Operations"},{"location":"python/#conditionals","text":"","title":"Conditionals"},{"location":"python/#whitespace","text":"One thing that we haven't mentioned yet, but is a very important aspect of python is Whitespace . Whitespace is the area taken up in your code by lines, spaces, and tabs. In many languages, the amount of space and linebreaks you put between statements doesn't really matter. With these other languages, you can format code however you want; tabs, spaces, newlines, can be essentially up to you. However, in python, this is not the case. Tabs, newlines, and spaces are very important, and improper uses of whitespace can result in errors, more specifically IndentationError . Whitespace is important in the next few sections, so make sure to keep in mind that Whitespace in python is important.","title":"Whitespace"},{"location":"python/#if-else-if-else","text":"You may have seen conditionals in other coding languages before, but conditionals in python work similarly as other languages, but with the caveat of whitespace. Conditionals will run the code indented underneath them if the condition is met. Conditionals can be used in python with if , elif , and else . if will run the code indented under it if the statement, followed by a colon, is evaluated to True bool_var = True #Can alternatively use if bool_var: if bool_var == True : print ( \"Your variable is True\" ) elif is short for else if. If the if statement and all other elif statements above it at the same indentation level all evaluate to false, and the statement in the elif statement is evaluated to True , then the code under that elif statement will run. elif must be followed by an if statement or another elif statement. The definition of the elif is a bit confusing, but if you are familiar with else if from other languages, or use it, it is fairly easy to understand! if bool_var == False : print ( \"Your variable is False\" ) elif bool_var == True : print ( \"Your variable is True\" ) else statements will evaluate if the if statement and elif statements above it at the same indentation level all evaluate to False . else must follow a previous if statement and all other elif statements. With this, we can see how all of these conditional statements can be chained together to do different things. bool_var = True if bool_var == False : print ( \"Your variable is False\" ) elif bool_var == None : print ( \"Your variable is None\" ) else : print ( \"Your variable is neither False nor None\" ) Hint You might be wondering why these operations are useful, so we will be going over an example you might use in your projects. Let's say you want to read when a button is being pressed, and do something on that button press. Let's say that when your button is being held down, the on_press variable is True , False otherwise. If you want to do something on this button press, you can simply use the conditional if on_press : # Do something You can even chain this together with multiple buttons, for example if two variables are set by two buttons, on_press_1 and on_press_2 respectively, if you want to do something when only related to only one button when it is pressed, you can use the following: if on_press_1 != on_press_2 : if on_press_1 : # Do something elif on_press_2 : # Do something Now onto the problem...","title":"If, else if, else"},{"location":"python/#problem-2-microcontroller-testing","text":"Question You have a python microcontroller that has very sensitive electronics attached and you want to ensure that your microcontroller is recieving a proper power source. Your microcontroller can detect the amperage and voltage of the electricity, however, your electronics attached say that your microcontroller needs between 12 and 13 watts. As a good ECE 35 student you of course know that the wattage can be calculated with wattage = amperage * voltage . Using a measurement for the amperage and voltage given to your microcontroller, print \"Too little power\", if the wattage is below 12, \"Too much power\", if the wattage is above 13, and \"Sufficient power\" otherwise. Hint: use boolean comparison operators and conditionals #SKELETON CODE # Given voltage (v) and amperage (a) (keep in mind the values are here for reference, this should work for any set of voltage and amperage) v = 4.9 a = 2.1 # YOUR CODE BELOW # ...","title":"[Problem 2] Microcontroller Testing"},{"location":"python2/","text":"Written by Dillon Hicks Lists Now that we have gone over some basics of Python syntax, let's go over something a bit more useful - Lists ! They are most commonly used as arrays, as seen in languages such as C and Java, but can be used as so much more. Lists are an extremely useful data structure and can be used as arrays, queues, stacks . They can also hold variables of different types , which makes them very versatile. You can define them with square brackets, with elements of that list separated by commas . For example, if we wanted to define a list, named my_list , with numbers 1-5, we can define it as such: my_list = [ 1 , 2 , 3 , 4 , 5 ] Lists become even more powerful with the use of loops, as shown in the next section. List Indexing You can access specific elements of Lists with indexing You can get elements of a List with brackets after a list surrounding the index Python has zero-indexed lists, which means the indexing starts from 0 like a normal language ( looking at you Matlab... ) # Using previous my_list variable # Should print 1, the 0th element print ( my_list [ 0 ]) You can edit elements the same way, with list indexing. For example, if you wanted the first element of the previous my_list variable to be 0, you can simply do the following: # Using previous my_list variable my_list [ 0 ] = 0 # Should print [0,2,3,4,5] print ( my_list ) Info You can also index lists in many other ways, for example negative list indexing and slices . This isn't necessary per se to use lists, but they are super useful, and will almost certainly be used if you want to properly do any coding technical interviews in Python (which is recommended due to the ease of python. For additional information, check out these resources on list slicing and advanced indexing. Negative List Indexing List Slices List Modification In addition if you want to modify a list by making it larger, and not just changing elements, you can use append() and extend() to add values to the end of the list. append() is used to add a single value to the end of a list. append() is used to add a single value to the end of a list. In order to remove an element from a list, you can use the remove() or pop() functions. remove() removes the first element with the value given, while pop() removes the last element or the element with the specified index List Length If you want the length of a list, you can use the len() function. This function can also be used to find the length of strings as well. hands_on_classes = [ \"ECE 196\" , \"ECE_5\" , \"ECE 16\" , \"ECE 115\" ] # Should print 4, since there are 4 variables in the hands_on_classes variable print ( len ( hands_on_classes )) String Manipulation Now that we have learned lists, we will quickly go over some of the operations you can do on strings. Strings operate a lot like lists or arrays, so These types of operations on strings are something that you see very often in natural language processing workflows for python, and more generally, whenever you want to parse text from a user or display text properly. There are many string manipulation methods, and we definitely won't talk about all of these here, but there are some useful operations that might be useful for your future python career and cough cough assignments for this class. You can concatenate lists (put one list after another) with the + symbol, similar to addition with Python standard arithmetic. # Should print \"HelloWorld\" (We didn't put a space) print ( \"Hello\" + \"World\" ) # Should print \"Hello World\" print ( \"Hello \" + \"World\" ) We can also split these strings by certain characters with the split() function. Splitting a list by characters will . This is especially useful when you want to break up a sentence into a list of words, or character-separated values into those individual values. Similarly, you can use join() my_str = \"Hello my name is\" # Should print [\"Hello, \"my\", \"name\", \"is\"] print ( my_str . split ()) In addition we can use some other functions to see whether a string represents an integer. my_str = \"Hello my name is\" my_str_2 = \"123\" # Should print False print ( my_str . isdigit ()) # Should print True print ( my_str_2 . isdigit ()) There are other similar functions that you can use such as isalpha() and isdecimal() Loops Now that we have gone over lists and strings, let's go over loops so we can establish a real-world usage for what we just learned. While Loops While loops will continue repeating everything indented under it, as long as the expression evaluates to True . This has a similar behavior to while loops in other languages! For Loops [Problem 2] Short Questions Question You are given 21 daily temperature readings from a remote device and are asked to do some data analysis on it. These values are given to directly to your python program. Print whether the list What functions might you use to find the minimum, maximum, and average temperatures of this list? (Google how to do this) Given a list of temperatures, Skeleton Code: #Imagine that this list temperatures = [ 68.21122500672686 , 73.79972316786628 , 66.7749840549457 , 70.32700390306779 , 72.82555562328548 , 65.81532465482273 , 69.28429355033545 , 68.45502278511506 , 68.40738731886807 , 68.45665260662977 , 70.64380857251861 , 70.80989113857657 , 72.46875233355938 , 70.64159500472778 , 70.69598489886532 , 68.05456954711212 , 65.76790308648873 , 72.75473876512704 , 69.43152327781354 , 66.11085635300678 , 67.15382574614719 ] # Print whether this list has length 21 or note, note that this list can change, so just use it's variable rather than printing true or false # YOUR CODE HERE # Print the minimum, maximum, and average temperatures # YOUR CODE HERE # Split the list into 3 weeks, and calculate the minimum, maximum, and average temperatures. # YOUR CODE HERE Functions [Problem 3] Phone Number Verification Question Phone number verification Write a function, phone_test() , to test if a given string phone number in the form #-###-###-####, or ###-###-#### is a valid phone number. For example, the phone number could be given could be in the form 1-858-534-2230 or 858-534-2230, abc-123-defg, with the last example an invalid number. Note that all are separated by the - character. Hint, use the split function to split the initial string, then loop through that list to verify that each is valid and there are a proper amount of splits. Skeleton code (copy and paste the below into your .py file): def phone_test ( number ): #WRITE YOUR CODE UNDER HERE #TEST CASES, DO NOT EDIT UNDER THIS LINE","title":"List, Loops and Functions"},{"location":"python2/#lists","text":"Now that we have gone over some basics of Python syntax, let's go over something a bit more useful - Lists ! They are most commonly used as arrays, as seen in languages such as C and Java, but can be used as so much more. Lists are an extremely useful data structure and can be used as arrays, queues, stacks . They can also hold variables of different types , which makes them very versatile. You can define them with square brackets, with elements of that list separated by commas . For example, if we wanted to define a list, named my_list , with numbers 1-5, we can define it as such: my_list = [ 1 , 2 , 3 , 4 , 5 ] Lists become even more powerful with the use of loops, as shown in the next section.","title":"Lists"},{"location":"python2/#list-indexing","text":"You can access specific elements of Lists with indexing You can get elements of a List with brackets after a list surrounding the index Python has zero-indexed lists, which means the indexing starts from 0 like a normal language ( looking at you Matlab... ) # Using previous my_list variable # Should print 1, the 0th element print ( my_list [ 0 ]) You can edit elements the same way, with list indexing. For example, if you wanted the first element of the previous my_list variable to be 0, you can simply do the following: # Using previous my_list variable my_list [ 0 ] = 0 # Should print [0,2,3,4,5] print ( my_list ) Info You can also index lists in many other ways, for example negative list indexing and slices . This isn't necessary per se to use lists, but they are super useful, and will almost certainly be used if you want to properly do any coding technical interviews in Python (which is recommended due to the ease of python. For additional information, check out these resources on list slicing and advanced indexing. Negative List Indexing List Slices","title":"List Indexing"},{"location":"python2/#list-modification","text":"In addition if you want to modify a list by making it larger, and not just changing elements, you can use append() and extend() to add values to the end of the list. append() is used to add a single value to the end of a list. append() is used to add a single value to the end of a list. In order to remove an element from a list, you can use the remove() or pop() functions. remove() removes the first element with the value given, while pop() removes the last element or the element with the specified index","title":"List Modification"},{"location":"python2/#list-length","text":"If you want the length of a list, you can use the len() function. This function can also be used to find the length of strings as well. hands_on_classes = [ \"ECE 196\" , \"ECE_5\" , \"ECE 16\" , \"ECE 115\" ] # Should print 4, since there are 4 variables in the hands_on_classes variable print ( len ( hands_on_classes ))","title":"List Length"},{"location":"python2/#string-manipulation","text":"Now that we have learned lists, we will quickly go over some of the operations you can do on strings. Strings operate a lot like lists or arrays, so These types of operations on strings are something that you see very often in natural language processing workflows for python, and more generally, whenever you want to parse text from a user or display text properly. There are many string manipulation methods, and we definitely won't talk about all of these here, but there are some useful operations that might be useful for your future python career and cough cough assignments for this class. You can concatenate lists (put one list after another) with the + symbol, similar to addition with Python standard arithmetic. # Should print \"HelloWorld\" (We didn't put a space) print ( \"Hello\" + \"World\" ) # Should print \"Hello World\" print ( \"Hello \" + \"World\" ) We can also split these strings by certain characters with the split() function. Splitting a list by characters will . This is especially useful when you want to break up a sentence into a list of words, or character-separated values into those individual values. Similarly, you can use join() my_str = \"Hello my name is\" # Should print [\"Hello, \"my\", \"name\", \"is\"] print ( my_str . split ()) In addition we can use some other functions to see whether a string represents an integer. my_str = \"Hello my name is\" my_str_2 = \"123\" # Should print False print ( my_str . isdigit ()) # Should print True print ( my_str_2 . isdigit ()) There are other similar functions that you can use such as isalpha() and isdecimal()","title":"String Manipulation"},{"location":"python2/#loops","text":"Now that we have gone over lists and strings, let's go over loops so we can establish a real-world usage for what we just learned.","title":"Loops"},{"location":"python2/#while-loops","text":"While loops will continue repeating everything indented under it, as long as the expression evaluates to True . This has a similar behavior to while loops in other languages!","title":"While Loops"},{"location":"python2/#for-loops","text":"","title":"For Loops"},{"location":"python2/#problem-2-short-questions","text":"Question You are given 21 daily temperature readings from a remote device and are asked to do some data analysis on it. These values are given to directly to your python program. Print whether the list What functions might you use to find the minimum, maximum, and average temperatures of this list? (Google how to do this) Given a list of temperatures, Skeleton Code: #Imagine that this list temperatures = [ 68.21122500672686 , 73.79972316786628 , 66.7749840549457 , 70.32700390306779 , 72.82555562328548 , 65.81532465482273 , 69.28429355033545 , 68.45502278511506 , 68.40738731886807 , 68.45665260662977 , 70.64380857251861 , 70.80989113857657 , 72.46875233355938 , 70.64159500472778 , 70.69598489886532 , 68.05456954711212 , 65.76790308648873 , 72.75473876512704 , 69.43152327781354 , 66.11085635300678 , 67.15382574614719 ] # Print whether this list has length 21 or note, note that this list can change, so just use it's variable rather than printing true or false # YOUR CODE HERE # Print the minimum, maximum, and average temperatures # YOUR CODE HERE # Split the list into 3 weeks, and calculate the minimum, maximum, and average temperatures. # YOUR CODE HERE","title":"[Problem 2] Short Questions"},{"location":"python2/#functions","text":"","title":"Functions"},{"location":"python2/#_1","text":"","title":""},{"location":"python2/#problem-3-phone-number-verification","text":"Question Phone number verification Write a function, phone_test() , to test if a given string phone number in the form #-###-###-####, or ###-###-#### is a valid phone number. For example, the phone number could be given could be in the form 1-858-534-2230 or 858-534-2230, abc-123-defg, with the last example an invalid number. Note that all are separated by the - character. Hint, use the split function to split the initial string, then loop through that list to verify that each is valid and there are a proper amount of splits. Skeleton code (copy and paste the below into your .py file): def phone_test ( number ): #WRITE YOUR CODE UNDER HERE #TEST CASES, DO NOT EDIT UNDER THIS LINE","title":"[Problem 3] Phone Number Verification"},{"location":"python3/","text":"Written by Dillon Hicks Introduction What is Python and what can you use it for? Variables and Types Number Operations Boolean Operations Conditionals Whitespace If, else if, else Lists Loops While Loops For Loops Functions","title":"More Advanced"},{"location":"python3/#introduction","text":"","title":"Introduction"},{"location":"python3/#what-is-python-and-what-can-you-use-it-for","text":"","title":"What is Python and what can you use it for?"},{"location":"python3/#variables-and-types","text":"","title":"Variables and Types"},{"location":"python3/#number-operations","text":"","title":"Number Operations"},{"location":"python3/#boolean-operations","text":"","title":"Boolean Operations"},{"location":"python3/#conditionals","text":"","title":"Conditionals"},{"location":"python3/#whitespace","text":"","title":"Whitespace"},{"location":"python3/#if-else-if-else","text":"","title":"If, else if, else"},{"location":"python3/#lists","text":"","title":"Lists"},{"location":"python3/#loops","text":"","title":"Loops"},{"location":"python3/#while-loops","text":"","title":"While Loops"},{"location":"python3/#for-loops","text":"","title":"For Loops"},{"location":"python3/#functions","text":"","title":"Functions"},{"location":"pythoninstall/","text":"Written by Dillon Hicks What is Python and what can you use it for? [Problem 1] Question Brainstorming time! Based of of the topics and uses talked about in the previous video, what would you use python for? Give a short description (5-6 sentences) of a project that you would implement and how python would be used for it. What possible libraries would you use? Has anyone done a project similar to this before? Mention both the libraries you can use and the similar project in your description and give a link to both of these. Hint : Search \"python library for (insert technology you are interested in here)\" to find relevant libraries Installation In order to get started with Python, please install Anaconda , a Python distrubution which includes many libraries and tools that you might need for future sections of this class. With Anaconda, you can install Python, Jupyter Notebook, Visual Studio Code (VS Code), and many other very helpful tools. Please install Anaconda with the link below , with VSCode, which is included in the Anaconda installer. Please follow the video below or TA's if you are unable to install Anaconda with Python working. Install Anaconda with VS Code","title":"Installation and Introduction"},{"location":"pythoninstall/#what-is-python-and-what-can-you-use-it-for","text":"","title":"What is Python and what can you use it for?"},{"location":"pythoninstall/#problem-1","text":"Question Brainstorming time! Based of of the topics and uses talked about in the previous video, what would you use python for? Give a short description (5-6 sentences) of a project that you would implement and how python would be used for it. What possible libraries would you use? Has anyone done a project similar to this before? Mention both the libraries you can use and the similar project in your description and give a link to both of these. Hint : Search \"python library for (insert technology you are interested in here)\" to find relevant libraries","title":"[Problem 1]"},{"location":"pythoninstall/#installation","text":"In order to get started with Python, please install Anaconda , a Python distrubution which includes many libraries and tools that you might need for future sections of this class. With Anaconda, you can install Python, Jupyter Notebook, Visual Studio Code (VS Code), and many other very helpful tools. Please install Anaconda with the link below , with VSCode, which is included in the Anaconda installer. Please follow the video below or TA's if you are unable to install Anaconda with Python working. Install Anaconda with VS Code","title":"Installation"},{"location":"rpi/","text":"Intro to Raspberry Pi Written by Curtis Lee, pictures by Ravi Patel Recommended Reading Please read the Vilros Quick Start Guide (included with the Raspberry Pi kit) up to section 2.5 (and skip 2.3). Then you can skip to Pi Configuration . Slides What is Raspberry Pi? Quote The Raspberry Pi is a low cost, credit-card sized computer. Raspberry Pi is a product line of single-board computers aimed at hobbyists and students. Small form factor, low cost, and ease-of-use CPU is ARM based, similar to those found in smartphones. Has USB, HDMI and network connectivity like other computers. but also GPIOs like a microcontroller. All these characteristics means it's suitable for a wide range of embedded uses! Raspberry Pi Setup Hardware Checklist Raspberry Pi 5V, 2.5A Micro USB Power Supply (for Pi) MicroSD Card with NOOBS preloaded Keyboard & Mouse HDMI Monitor 12V, 200 mA Power Supply (for Monitor) HDMI Cable Hardware Kit DHT Sensor LEDs, Resistors, Buttons, etc Hardware Setup Connect the HDMI monitor to the 12V, 200mA power supply Insert the MicroSD Card into the Raspberry Pi Before powering the Raspberry Pi, connect it to the HDMI monitor via the HMDI cable Connect the 5V, 2.5A power supply to the Raspberry Pi to power it on To start using the keyboard, simply insert the USB dongle into the Raspberry Pi and turn on the keyboard OS Setup Info There are many OS's for the Raspberry Pi, but we'll be using is called Raspbian . The Raspberry Pi kit should come with an SD card with NOOBS preinstalled. NOOBS allows you start the Pi out-of-the-box and install Raspbian with an internet connection. If for some reason the card is empty or corrupted we can also manually flash Raspbian . Once the RPi boots up, the monitor should show a welcome message. Click Next. Raspberry Pi will request you to select the Country, Language, and Timezone. Select the appropriate setting. If you\u2019re using the US Keyboard, make sure to check the box for US Keyboard. Click Next. The default \u2018pi\u2019 user account currently has the password \u2018raspberry\u2019. Now is a time to change the password. Once done, click Next. On the next screen, check the box if there is a black border around the desktop. Click Next. Select the WiFi network that you wish to connect with. Note: WiFi will be required for this project. Once connected, proceed to the next step. Once connected to WiFi, RPi will be requesting a software update. Click Next to update software. If there are any errors with the updates, skip this step. Once all the configuration is set up, restart the raspberry pi. Pi Configuration Click on the application menu on the top left. Go to Preferences and open up Raspberry Pi Configuration. Now if the time to change any login credentials, if desired. Go to Interface and enable SSH and VNC. Software Setup Run the following commands in the Terminal app: Double check for updates: sudo apt update sudo apt upgrade -y If all the software was already updated sucessfully in the previous step, then this should quickly report that everything is up to date. Otherwise, it could take a very long time , depending on how many packages need to be updated. Install library firebase-admin: pip3 install firebase-admin Install some libraries for the DHT22 sensor: pip3 install adafruit-circuitpython-dht sudo apt-get install libgpiod2 Access Pi from PC There are also various ways we can access a terminal, copy files, or even control the entire desktop from a computer connected to the same network. Technically this section is not necessary . But at this point, it may be worth investing time into figuring out, especially if switching back and forth between the two devices is cumbersome. SSH With SSH you can remotely open a terminal to the Pi from the comfort of your main computer. To find the IP address, on your Raspberry Pi run following terminal command: ip addr And look for the IP address listed under wlan0 or eth0 , depending on how you are connected. If you have Mac/Linux, ssh should be built-in. If you have Windows, you need to install Git for Windows. Alternatively you can use PuTTY intead of ssh . On your computer, use the ssh command followed by username@ip_address . For example, if the IP address is 192.168.0.100 : ssh pi@192.168.0.100 Read more about using SSH and using PuTTY on the Raspberry Pi website. SCP SCP stands for \"secure copy\". We can use it to copy files from another device on the network securely over an SSH connection. The syntax is similar to the normal unix cp command. If you have Mac/Linux, scp should be built-in. If you have Windows, you need to install Git for Windows. Alternatively you can use WinSCP instead of scp . For example, to copy a file from your computer to the Raspberry Pi: scp mycode.py pi@192.168.0.100:/home/pi/ This will copy the file mycode.py , from the current directory on your computer, to the \"pi\" user home folder on the Raspberry Pi. Read more about using SCP here . VNC With VNC you can also use the desktop and control the mouse+keyboard remotely. To use VNC, download VNC Viewer on your computer. Read more about using VNC on the Raspberry Pi website. Using Hardware Pinouts Refer to this pinout diagram for connections: For more details about the pins and how to use them, read this article . LED Hello World The first thing we want to try is blinking an LED. This is the circuit equivalent of \"Hello World\". Connect an LED and resistor in series to Pin 17: Warning Always use a resistor to limit the current on the LED to avoid burns! See why here. Now in your Pi's Home directory, create a new file called blink.py with this code: import RPi.GPIO as GPIO import time GPIO.setmode( GPIO.BCM ) GPIO.setwarnings( False ) GPIO.setup( 17, GPIO.OUT ) GPIO.output( 17, GPIO.HIGH ) time.sleep( 1 ) GPIO.output( 17, GPIO.LOW ) Save and run with Python in a terminal: python3 blink.py The LED should blink on for a second! Now try changing the 3rd block to this: while True: GPIO.output( 17, GPIO.HIGH ) time.sleep( 0.5 ) GPIO.output( 17, GPIO.LOW ) time.sleep( 0.5 ) The LED should blink on and off indefinitely every second! Tip Press Ctrl+C in the running terminal to exit the Python script. RGB LED An RGB LED is actually just 3 different color LEDs (red, green, blue) in a single package. With some combinination these colors we can also create secondary colors. So to connect it to the Raspberry Pi, we can follow the same principle as before, but using 3 different pins. Warning We also need resistor on each of the 3 seperate color LEDS! Now lets try blinking through some different colors: import RPi.GPIO as GPIO import time GPIO.setmode(GPIO.BCM) GPIO.setwarnings(False) RED_PIN = 17 GREEN_PIN = 27 BLUE_PIN = 22 GPIO.setup(RED_PIN, GPIO.OUT) GPIO.setup(GREEN_PIN, GPIO.OUT) GPIO.setup(BLUE_PIN, GPIO.OUT) def blink( red,green,blue ): GPIO.output(RED_PIN,red) GPIO.output(GREEN_PIN,green) GPIO.output(BLUE_PIN,blue) time.sleep( 1 ) GPIO.output(RED_PIN,GPIO.LOW) GPIO.output(GREEN_PIN,GPIO.LOW) GPIO.output(BLUE_PIN,GPIO.LOW) time.sleep( 1 ) blink( GPIO.HIGH, GPIO.LOW, GPIO.LOW ) ## Red blink( GPIO.HIGH, GPIO.HIGH, GPIO.LOW ) ## Yellow blink( GPIO.LOW, GPIO.HIGH, GPIO.LOW ) ## Green blink( GPIO.LOW, GPIO.HIGH, GPIO.HIGH ) ## Cyan blink( GPIO.LOW, GPIO.LOW, GPIO.HIGH ) ## Blue blink( GPIO.HIGH, GPIO.LOW, GPIO.HIGH ) ## Magenta blink( GPIO.HIGH, GPIO.HIGH, GPIO.HIGH ) ## White DHT22 Sensor The DHT sensors are humidity and temperature sensors. We are using the DHT22 , but there is also a blue DHT11 sensor, which is a cheaper but less precise version. We can connect it on a breadboard with a 10k resistor like this: First, we need to open the terminal and install some libraries: pip3 install adafruit-circuitpython-dht sudo apt-get install libgpiod2 We also may need to reboot the Pi after installing if it doesn't work. Now if we run this code: import adafruit_dht import board import time dht_pin = board.D4 dht_sensor = adafruit_dht.DHT22(dht_pin, use_pulseio=False) temp_c = dht_sensor.temperature temp_f = temp_c * (9 / 5) + 32 hum = dht_sensor.humidity print(\"Temperature =\", temp_c, 'C,', temp_f, 'F') print(\"Humidity =\", hum, '%') It will read the sensor and print results. With a loop we can also make run indefinitely at a 10 sec interval like this: while True: temp_c = dht_sensor.temperature temp_f = temp_c * (9 / 5) + 32 hum = dht_sensor.humidity print(\"Temperature =\", temp_c, 'C,', temp_f, 'F') print(\"Humidity =\", hum, '%') time.sleep( 2 ) Info We are initializing dht_sensor without pulseio API with use_pulseio=False . In case you need to use pulseio and have some error with libgpio_pulsein , you may have to kill the existing process using that library. Try running this terminal command: kill $(pgrep libgpio) Buttons To connect a button, we don't need external components as long as it's connected to an input pin with pullup enabled. One way to incorporate the button in an event-based way: import RPi.GPIO as GPIO GPIO.setmode(GPIO.BCM) GPIO.setwarnings(False) GPIO.setup(10, GPIO.IN, pull_up_down=GPIO.PUD_UP) def callback_func(*args): print(\"Button was pushed!\") GPIO.add_event_detect(10, edge=GPIO.FALLING, callback=callback_func, bouncetime=200) input(\"press enter 2 quit\\n\") # block program from exiting Things to consider: Since the button is wired straight to Ground , we should enable the internal Pull Up resistor and detect a Falling Edge . We need a debouncing time in the milliseconds . Adding an event callback means the callback function will run asynchronously from the main program execution. If there are no more code to run, we need to block execution or the entire script will just exit. GPIO.cleanup() can be used to resolved state errors. Serial/UART The simplest way to communicate with an Arduino, BT module, and many external devices is to use serial. This process is the exact same as it would be on any generic Linux computer. First, we need to find available serial ports by entering into the console: ls /dev/tty* A good trick to find the correct port USB serial devices is to run it before and after plugging it in. Usually it will be /dev/ttyUSB0 if it's the only one plugged in. Here is an example to send a single byte from python script to the external device: import serial ser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1) user_input = input(\"pls enter a byte:\" ) user_input = user_input.encode('utf_8') ser.write(user_input) line = ser.readline() print(line.decode('utf_8')) ser.close() Link to Examples from class More Hardware There are nearly endless hardware components that you can use with the Raspberry Pi, including but not limited to the items in kit. If you would like to use other hardware components, here's some things to keep in mind: The Pi's GPIO's are all 3.3v based, and supply limited current only. To use 5.0v hardware, you may need a level shifter to prevent burning the pins. To use high power components like motor, you will need an external power source, the Pi cannot supply enough power. To figure out how to use a new module, do research: Check Pi tutorials, for popular components chances are that someone else has already figured it out. Check Arduino tutorials, for the same reason. Check datasheets/documentation for reference, but sometimes they can be very advanced. Danger Do not plug jumper wires directly into the wall outlet. Do not plug jumper wires from the wall into the Pi. Do not plug jumper wires from the wall into the breadboard. Do not eat electronic components. Wifi Configuration UCSD-PROTECTED If you want to connect to UCSD-PROTECTED or any of the RESNET networks, manual configuration is needed because they use WPA-Enterprise. You can configure the Pi to connect to these network by editing a file with the following command: sudo mousepad /etc/wpa_supplicant/wpa_supplicant.conf And putting this template into the file: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=US network={ ssid=\"UCSD-PROTECTED\" scan_ssid=1 key_mgmt=WPA-EAP eap=PEAP identity=\"YOUR UCSD USERNAME HERE\" password=\"YOUR UCSD PASSWORD HERE\" phase1=\"peapver=0\" phase2=\"MSCHAPV2\" disabled=1 } * Replace identity and password with your information. More WiFi The Process for any RESNET network is the same as previous section, just copy and paste another network block and change the ssid to the proper RESNET wifi name. Same with eduroam , except eduroam requires full UCSD email for identity . Additionally, you can add multiple network blocks into the configuration file. If you want to set up the Pi to automatically connect to another (standard WPA2) Wifi network (ie. at home) you can also add another block below it like this: network={ ssid=\"YOUR WIFI NAME\" psk=\"YOUR WIFI PASSWORD\" } Links Raspberry Pi Setup Tutorial from 2019 Making a script run at startup Reset the Raspberry Pi Example Code Info Click here to see full code examples for this guide.","title":"Raspberry Pi"},{"location":"rpi/#intro-to-raspberry-pi","text":"Written by Curtis Lee, pictures by Ravi Patel Recommended Reading Please read the Vilros Quick Start Guide (included with the Raspberry Pi kit) up to section 2.5 (and skip 2.3). Then you can skip to Pi Configuration .","title":"Intro to Raspberry Pi"},{"location":"rpi/#slides","text":"","title":"Slides"},{"location":"rpi/#what-is-raspberry-pi","text":"Quote The Raspberry Pi is a low cost, credit-card sized computer. Raspberry Pi is a product line of single-board computers aimed at hobbyists and students. Small form factor, low cost, and ease-of-use CPU is ARM based, similar to those found in smartphones. Has USB, HDMI and network connectivity like other computers. but also GPIOs like a microcontroller. All these characteristics means it's suitable for a wide range of embedded uses!","title":"What is Raspberry Pi?"},{"location":"rpi/#raspberry-pi-setup","text":"","title":"Raspberry Pi Setup"},{"location":"rpi/#hardware-checklist","text":"Raspberry Pi 5V, 2.5A Micro USB Power Supply (for Pi) MicroSD Card with NOOBS preloaded Keyboard & Mouse HDMI Monitor 12V, 200 mA Power Supply (for Monitor) HDMI Cable Hardware Kit DHT Sensor LEDs, Resistors, Buttons, etc","title":"Hardware Checklist"},{"location":"rpi/#hardware-setup","text":"Connect the HDMI monitor to the 12V, 200mA power supply Insert the MicroSD Card into the Raspberry Pi Before powering the Raspberry Pi, connect it to the HDMI monitor via the HMDI cable Connect the 5V, 2.5A power supply to the Raspberry Pi to power it on To start using the keyboard, simply insert the USB dongle into the Raspberry Pi and turn on the keyboard","title":"Hardware Setup"},{"location":"rpi/#os-setup","text":"Info There are many OS's for the Raspberry Pi, but we'll be using is called Raspbian . The Raspberry Pi kit should come with an SD card with NOOBS preinstalled. NOOBS allows you start the Pi out-of-the-box and install Raspbian with an internet connection. If for some reason the card is empty or corrupted we can also manually flash Raspbian . Once the RPi boots up, the monitor should show a welcome message. Click Next. Raspberry Pi will request you to select the Country, Language, and Timezone. Select the appropriate setting. If you\u2019re using the US Keyboard, make sure to check the box for US Keyboard. Click Next. The default \u2018pi\u2019 user account currently has the password \u2018raspberry\u2019. Now is a time to change the password. Once done, click Next. On the next screen, check the box if there is a black border around the desktop. Click Next. Select the WiFi network that you wish to connect with. Note: WiFi will be required for this project. Once connected, proceed to the next step. Once connected to WiFi, RPi will be requesting a software update. Click Next to update software. If there are any errors with the updates, skip this step. Once all the configuration is set up, restart the raspberry pi.","title":"OS Setup"},{"location":"rpi/#pi-configuration","text":"Click on the application menu on the top left. Go to Preferences and open up Raspberry Pi Configuration. Now if the time to change any login credentials, if desired. Go to Interface and enable SSH and VNC.","title":"Pi Configuration"},{"location":"rpi/#software-setup","text":"Run the following commands in the Terminal app: Double check for updates: sudo apt update sudo apt upgrade -y If all the software was already updated sucessfully in the previous step, then this should quickly report that everything is up to date. Otherwise, it could take a very long time , depending on how many packages need to be updated. Install library firebase-admin: pip3 install firebase-admin Install some libraries for the DHT22 sensor: pip3 install adafruit-circuitpython-dht sudo apt-get install libgpiod2","title":"Software Setup"},{"location":"rpi/#access-pi-from-pc","text":"There are also various ways we can access a terminal, copy files, or even control the entire desktop from a computer connected to the same network. Technically this section is not necessary . But at this point, it may be worth investing time into figuring out, especially if switching back and forth between the two devices is cumbersome.","title":"Access Pi from PC"},{"location":"rpi/#ssh","text":"With SSH you can remotely open a terminal to the Pi from the comfort of your main computer. To find the IP address, on your Raspberry Pi run following terminal command: ip addr And look for the IP address listed under wlan0 or eth0 , depending on how you are connected. If you have Mac/Linux, ssh should be built-in. If you have Windows, you need to install Git for Windows. Alternatively you can use PuTTY intead of ssh . On your computer, use the ssh command followed by username@ip_address . For example, if the IP address is 192.168.0.100 : ssh pi@192.168.0.100 Read more about using SSH and using PuTTY on the Raspberry Pi website.","title":"SSH"},{"location":"rpi/#scp","text":"SCP stands for \"secure copy\". We can use it to copy files from another device on the network securely over an SSH connection. The syntax is similar to the normal unix cp command. If you have Mac/Linux, scp should be built-in. If you have Windows, you need to install Git for Windows. Alternatively you can use WinSCP instead of scp . For example, to copy a file from your computer to the Raspberry Pi: scp mycode.py pi@192.168.0.100:/home/pi/ This will copy the file mycode.py , from the current directory on your computer, to the \"pi\" user home folder on the Raspberry Pi. Read more about using SCP here .","title":"SCP"},{"location":"rpi/#vnc","text":"With VNC you can also use the desktop and control the mouse+keyboard remotely. To use VNC, download VNC Viewer on your computer. Read more about using VNC on the Raspberry Pi website.","title":"VNC"},{"location":"rpi/#using-hardware","text":"","title":"Using Hardware"},{"location":"rpi/#pinouts","text":"Refer to this pinout diagram for connections: For more details about the pins and how to use them, read this article .","title":"Pinouts"},{"location":"rpi/#led-hello-world","text":"The first thing we want to try is blinking an LED. This is the circuit equivalent of \"Hello World\". Connect an LED and resistor in series to Pin 17: Warning Always use a resistor to limit the current on the LED to avoid burns! See why here. Now in your Pi's Home directory, create a new file called blink.py with this code: import RPi.GPIO as GPIO import time GPIO.setmode( GPIO.BCM ) GPIO.setwarnings( False ) GPIO.setup( 17, GPIO.OUT ) GPIO.output( 17, GPIO.HIGH ) time.sleep( 1 ) GPIO.output( 17, GPIO.LOW ) Save and run with Python in a terminal: python3 blink.py The LED should blink on for a second! Now try changing the 3rd block to this: while True: GPIO.output( 17, GPIO.HIGH ) time.sleep( 0.5 ) GPIO.output( 17, GPIO.LOW ) time.sleep( 0.5 ) The LED should blink on and off indefinitely every second! Tip Press Ctrl+C in the running terminal to exit the Python script.","title":"LED Hello World"},{"location":"rpi/#rgb-led","text":"An RGB LED is actually just 3 different color LEDs (red, green, blue) in a single package. With some combinination these colors we can also create secondary colors. So to connect it to the Raspberry Pi, we can follow the same principle as before, but using 3 different pins. Warning We also need resistor on each of the 3 seperate color LEDS! Now lets try blinking through some different colors: import RPi.GPIO as GPIO import time GPIO.setmode(GPIO.BCM) GPIO.setwarnings(False) RED_PIN = 17 GREEN_PIN = 27 BLUE_PIN = 22 GPIO.setup(RED_PIN, GPIO.OUT) GPIO.setup(GREEN_PIN, GPIO.OUT) GPIO.setup(BLUE_PIN, GPIO.OUT) def blink( red,green,blue ): GPIO.output(RED_PIN,red) GPIO.output(GREEN_PIN,green) GPIO.output(BLUE_PIN,blue) time.sleep( 1 ) GPIO.output(RED_PIN,GPIO.LOW) GPIO.output(GREEN_PIN,GPIO.LOW) GPIO.output(BLUE_PIN,GPIO.LOW) time.sleep( 1 ) blink( GPIO.HIGH, GPIO.LOW, GPIO.LOW ) ## Red blink( GPIO.HIGH, GPIO.HIGH, GPIO.LOW ) ## Yellow blink( GPIO.LOW, GPIO.HIGH, GPIO.LOW ) ## Green blink( GPIO.LOW, GPIO.HIGH, GPIO.HIGH ) ## Cyan blink( GPIO.LOW, GPIO.LOW, GPIO.HIGH ) ## Blue blink( GPIO.HIGH, GPIO.LOW, GPIO.HIGH ) ## Magenta blink( GPIO.HIGH, GPIO.HIGH, GPIO.HIGH ) ## White","title":"RGB LED"},{"location":"rpi/#dht22-sensor","text":"The DHT sensors are humidity and temperature sensors. We are using the DHT22 , but there is also a blue DHT11 sensor, which is a cheaper but less precise version. We can connect it on a breadboard with a 10k resistor like this: First, we need to open the terminal and install some libraries: pip3 install adafruit-circuitpython-dht sudo apt-get install libgpiod2 We also may need to reboot the Pi after installing if it doesn't work. Now if we run this code: import adafruit_dht import board import time dht_pin = board.D4 dht_sensor = adafruit_dht.DHT22(dht_pin, use_pulseio=False) temp_c = dht_sensor.temperature temp_f = temp_c * (9 / 5) + 32 hum = dht_sensor.humidity print(\"Temperature =\", temp_c, 'C,', temp_f, 'F') print(\"Humidity =\", hum, '%') It will read the sensor and print results. With a loop we can also make run indefinitely at a 10 sec interval like this: while True: temp_c = dht_sensor.temperature temp_f = temp_c * (9 / 5) + 32 hum = dht_sensor.humidity print(\"Temperature =\", temp_c, 'C,', temp_f, 'F') print(\"Humidity =\", hum, '%') time.sleep( 2 ) Info We are initializing dht_sensor without pulseio API with use_pulseio=False . In case you need to use pulseio and have some error with libgpio_pulsein , you may have to kill the existing process using that library. Try running this terminal command: kill $(pgrep libgpio)","title":"DHT22 Sensor"},{"location":"rpi/#buttons","text":"To connect a button, we don't need external components as long as it's connected to an input pin with pullup enabled. One way to incorporate the button in an event-based way: import RPi.GPIO as GPIO GPIO.setmode(GPIO.BCM) GPIO.setwarnings(False) GPIO.setup(10, GPIO.IN, pull_up_down=GPIO.PUD_UP) def callback_func(*args): print(\"Button was pushed!\") GPIO.add_event_detect(10, edge=GPIO.FALLING, callback=callback_func, bouncetime=200) input(\"press enter 2 quit\\n\") # block program from exiting Things to consider: Since the button is wired straight to Ground , we should enable the internal Pull Up resistor and detect a Falling Edge . We need a debouncing time in the milliseconds . Adding an event callback means the callback function will run asynchronously from the main program execution. If there are no more code to run, we need to block execution or the entire script will just exit. GPIO.cleanup() can be used to resolved state errors.","title":"Buttons"},{"location":"rpi/#serialuart","text":"The simplest way to communicate with an Arduino, BT module, and many external devices is to use serial. This process is the exact same as it would be on any generic Linux computer. First, we need to find available serial ports by entering into the console: ls /dev/tty* A good trick to find the correct port USB serial devices is to run it before and after plugging it in. Usually it will be /dev/ttyUSB0 if it's the only one plugged in. Here is an example to send a single byte from python script to the external device: import serial ser = serial.Serial('/dev/ttyUSB0', 9600, timeout=1) user_input = input(\"pls enter a byte:\" ) user_input = user_input.encode('utf_8') ser.write(user_input) line = ser.readline() print(line.decode('utf_8')) ser.close() Link to Examples from class","title":"Serial/UART"},{"location":"rpi/#more-hardware","text":"There are nearly endless hardware components that you can use with the Raspberry Pi, including but not limited to the items in kit. If you would like to use other hardware components, here's some things to keep in mind: The Pi's GPIO's are all 3.3v based, and supply limited current only. To use 5.0v hardware, you may need a level shifter to prevent burning the pins. To use high power components like motor, you will need an external power source, the Pi cannot supply enough power. To figure out how to use a new module, do research: Check Pi tutorials, for popular components chances are that someone else has already figured it out. Check Arduino tutorials, for the same reason. Check datasheets/documentation for reference, but sometimes they can be very advanced. Danger Do not plug jumper wires directly into the wall outlet. Do not plug jumper wires from the wall into the Pi. Do not plug jumper wires from the wall into the breadboard. Do not eat electronic components.","title":"More Hardware"},{"location":"rpi/#wifi-configuration","text":"","title":"Wifi Configuration"},{"location":"rpi/#ucsd-protected","text":"If you want to connect to UCSD-PROTECTED or any of the RESNET networks, manual configuration is needed because they use WPA-Enterprise. You can configure the Pi to connect to these network by editing a file with the following command: sudo mousepad /etc/wpa_supplicant/wpa_supplicant.conf And putting this template into the file: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=US network={ ssid=\"UCSD-PROTECTED\" scan_ssid=1 key_mgmt=WPA-EAP eap=PEAP identity=\"YOUR UCSD USERNAME HERE\" password=\"YOUR UCSD PASSWORD HERE\" phase1=\"peapver=0\" phase2=\"MSCHAPV2\" disabled=1 } * Replace identity and password with your information.","title":"UCSD-PROTECTED"},{"location":"rpi/#more-wifi","text":"The Process for any RESNET network is the same as previous section, just copy and paste another network block and change the ssid to the proper RESNET wifi name. Same with eduroam , except eduroam requires full UCSD email for identity . Additionally, you can add multiple network blocks into the configuration file. If you want to set up the Pi to automatically connect to another (standard WPA2) Wifi network (ie. at home) you can also add another block below it like this: network={ ssid=\"YOUR WIFI NAME\" psk=\"YOUR WIFI PASSWORD\" }","title":"More WiFi"},{"location":"rpi/#links","text":"Raspberry Pi Setup Tutorial from 2019 Making a script run at startup Reset the Raspberry Pi","title":"Links"},{"location":"rpi/#example-code","text":"Info Click here to see full code examples for this guide.","title":"Example Code"},{"location":"scrap/","text":"Buttons Now to see some Bootstrap in action, we first can style our checkboxes. Remove the \"Select All\" button and replace the entire <form> with this: <form v-on:change=\"updateColor()\"> <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.r}\"> <input type=\"checkbox\" v-model=\"color.r\" > Red </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.g}\"> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.b}\"> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> <button v-if=\"color.r && color.g && color.b\" class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(false); updateColor()\">Deselect All</button> <button v-else class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> </div> </form> Refresh the page and we see a few new things are going on here: The buttons are wrapped in a new div of class=\"btn-group btn-group-toggle\" . This is actually two classes: btn-group turns the buttons into a single bar btn-group-toggle replaces checkboxes with toggle buttons Each label gained 3 new classes: btn makes it a button shape btn-secondary makes it the secondary color v-bind:class=\"{active: color.r}\" adds the active class depending on whether the value is true . This will make the button look darker when it is checked. We also added a Deselect All button. Not entirely related, but allows us to see the transitions better.","title":"Scrap"},{"location":"scrap/#buttons","text":"Now to see some Bootstrap in action, we first can style our checkboxes. Remove the \"Select All\" button and replace the entire <form> with this: <form v-on:change=\"updateColor()\"> <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\"> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.r}\"> <input type=\"checkbox\" v-model=\"color.r\" > Red </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.g}\"> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label class=\"btn btn-secondary\" v-bind:class=\"{active: color.b}\"> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> <button v-if=\"color.r && color.g && color.b\" class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(false); updateColor()\">Deselect All</button> <button v-else class=\"btn btn-secondary\" type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> </div> </form> Refresh the page and we see a few new things are going on here: The buttons are wrapped in a new div of class=\"btn-group btn-group-toggle\" . This is actually two classes: btn-group turns the buttons into a single bar btn-group-toggle replaces checkboxes with toggle buttons Each label gained 3 new classes: btn makes it a button shape btn-secondary makes it the secondary color v-bind:class=\"{active: color.r}\" adds the active class depending on whether the value is true . This will make the button look darker when it is checked. We also added a Deselect All button. Not entirely related, but allows us to see the transitions better.","title":"Buttons"},{"location":"secure/","text":"Intro to Security Written by Curtis Lee Firebase Authentication Designing a login system from scratch would not only be a complete waste of time, but also introduce security liabilities to our system. Using Firebase Auth, we can leverage Google's secure system by embedding a Google SSO (Single Sign On) into our app. Enable Google Sign In Visit the Authentication service section of the Firebase dashboard. Under Sign-in Providers , open the Google tab and enable the service. Under Authorized domains , add all the domains that our website is being visited from (including localhost and our Github Pages domain). Importing Library Like the other Firebase libraries, we need to include a script for the Auth library. <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-auth.js\"></script> After the main firebase object is initialized, we want get an auth object for convinience. auth = firebase.auth() We also may want to set the persistence level to LOCAL which allows the user to stay logged in even if the page is closed. auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL); Adding Functionality Now we want to add a few extra data fields to handle login state: data: { ... signedIn: false, email: \"none\", }, Add some extra functions signIn and signOut . This will launch a pop-up window for Google Sign In, and gracefully end the session if the user explicitly logs out. methods: { ... signIn: function () { var provider = new firebase.auth.GoogleAuthProvider(); auth.signInWithPopup(provider).then(function(result) { console.log( \"signed in as: \"+result.user.email ); }); }, signOut: function () { auth.signOut().then(function() { console.log( \"signed out\" ); }); }, }, Add this listener in created to handle changes in login. This is the officially recommended way to keep track of login state. created: function() { ... auth.onAuthStateChanged(user => { if (user){ this.signedIn = true; this.email = user.email; } else{ this.signedIn = false; this.email = \"none\"; } }); }, At this point our Firebase Authentication system should be fully functional, which we can check by testing vm.signIn() and vm.signOut() in our browser terminal. However, the system currently does not actually prevent anyone from accessing our data, which we'll fix next. Setting Permissions One way we can quickly approach this is to list allowed users in our database and add users to the list manually. First, we should create another database structure to store our list of allowed users. In Firebase Dashboard > Authentication , copy the UID of the user you want to allow (ie yourself). In Firebase Dashboard > Realtime Database > Data We add a new entry users , under the root. To users we add our UID, with the value true as a placeholder. We can also add more users if needed. Next, we need to change the Realtime Database rules, which currently allow public read/write. In Firebase Dashboard, go to Realtime Database > Rules > Edit Rules Replace the rules with something like this: { \"rules\": { \".read\" : \"auth != null && root.child('users').hasChild(auth.uid)\", \".write\" : \"auth != null && root.child('users').hasChild(auth.uid)\" } } This will ensure: User is authenticated User's UID exists in users Now, if we go back to our app, open the Browser Console, when we try to access data we should see an error message of this type: Uncaught (in promise) Error: PERMISSION_DENIED: Permission denied But if we sign in using vm.signIn() as an allowed user, then we should be able to access data. Changing the UI At this point we may have realized using the Browser Terminal to authenticate ourselves is not a good user experience. To fix this, we can alter our page using techniques we've already learned to make it more user friendly. State Dependant Page To start, we should wrap our current page contents in a div, and create another div along side it to hold a future login prompt. We can add v-show directives that depend on our state variable signedIn to show a login panel if the user is not signed in, or our main page if the user is signed in. <div v-show=\"!signedIn\"> <!-- Login prompt here... --> </div> <div v-show=\"signedIn\"> <!-- Page contents here... --> </div> Tip Although we could certainly use v-if , for performance it's technically better practice to use v-show for lots of elements. v-show simply adds a CSS hidden property to the div , while v-if will require the browser to re-render the contents. Adding Login Buttons For the login page, we simply copy the header from the main page and add a link-button that will run signIn() when clicked: <div class=\"container mt-5\"> <div class=\"row\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>You are not signed in.</p> <a class=\"btn btn-primary\" v-on:click=\"signIn()\">Sign In with Google</a> </div> </div> </div> We can also make similar changes to our main page's header to display the user's email, add a link-button to run signOut() , and put a bit of margin for cleanliness: <div class=\"container mt-5\"> <div class=\"row mb-4\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>Hello, {{ email }}!</p> <a class=\"btn btn-primary\" v-on:click=\"signOut()\">Sign Out</a> </div> </div> </div> Displaying User Info When a user logs in via Google, a few details are shared with the app: Email address Full name Profile picture Similar to how we got the user email, we can also display the other items as well. We can turn our Raspberry Pi card into a user details card like this: <div class=\"col-sm d-flex\"> <div class=\"card w-100\"> <img v-bind:src=\"photoURL\" class=\"card-img-top\" > <div class=\"card-body\"> <h5 class=\"card-title\">Hello, {{displayName}}!</h5> <p class=\"card-text\">{{email}}</p> <a class=\"btn btn-primary\" v-on:click=\"signOut()\">Sign Out</a> </div> </div> </div> Info We use the v-bind directive to bind the photoURL variable to the src attribute. Using {{ }} does not work on HTML attributes, only inner HTML content. Allowing Domains If we access the app on Github Pages, the login popup may not work as expected. By default, Firebase rejects all domains except localhost and their own domain. To solve this, we can add our Github Pages domain: In Firebase Dashboard > Authorized domains , click Add Domain Add your [username].github.io address to the list.","title":"Security"},{"location":"secure/#intro-to-security","text":"Written by Curtis Lee","title":"Intro to Security"},{"location":"secure/#firebase-authentication","text":"Designing a login system from scratch would not only be a complete waste of time, but also introduce security liabilities to our system. Using Firebase Auth, we can leverage Google's secure system by embedding a Google SSO (Single Sign On) into our app.","title":"Firebase Authentication"},{"location":"secure/#enable-google-sign-in","text":"Visit the Authentication service section of the Firebase dashboard. Under Sign-in Providers , open the Google tab and enable the service. Under Authorized domains , add all the domains that our website is being visited from (including localhost and our Github Pages domain).","title":"Enable Google Sign In"},{"location":"secure/#importing-library","text":"Like the other Firebase libraries, we need to include a script for the Auth library. <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-auth.js\"></script> After the main firebase object is initialized, we want get an auth object for convinience. auth = firebase.auth() We also may want to set the persistence level to LOCAL which allows the user to stay logged in even if the page is closed. auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);","title":"Importing Library"},{"location":"secure/#adding-functionality","text":"Now we want to add a few extra data fields to handle login state: data: { ... signedIn: false, email: \"none\", }, Add some extra functions signIn and signOut . This will launch a pop-up window for Google Sign In, and gracefully end the session if the user explicitly logs out. methods: { ... signIn: function () { var provider = new firebase.auth.GoogleAuthProvider(); auth.signInWithPopup(provider).then(function(result) { console.log( \"signed in as: \"+result.user.email ); }); }, signOut: function () { auth.signOut().then(function() { console.log( \"signed out\" ); }); }, }, Add this listener in created to handle changes in login. This is the officially recommended way to keep track of login state. created: function() { ... auth.onAuthStateChanged(user => { if (user){ this.signedIn = true; this.email = user.email; } else{ this.signedIn = false; this.email = \"none\"; } }); }, At this point our Firebase Authentication system should be fully functional, which we can check by testing vm.signIn() and vm.signOut() in our browser terminal. However, the system currently does not actually prevent anyone from accessing our data, which we'll fix next.","title":"Adding Functionality"},{"location":"secure/#setting-permissions","text":"One way we can quickly approach this is to list allowed users in our database and add users to the list manually. First, we should create another database structure to store our list of allowed users. In Firebase Dashboard > Authentication , copy the UID of the user you want to allow (ie yourself). In Firebase Dashboard > Realtime Database > Data We add a new entry users , under the root. To users we add our UID, with the value true as a placeholder. We can also add more users if needed. Next, we need to change the Realtime Database rules, which currently allow public read/write. In Firebase Dashboard, go to Realtime Database > Rules > Edit Rules Replace the rules with something like this: { \"rules\": { \".read\" : \"auth != null && root.child('users').hasChild(auth.uid)\", \".write\" : \"auth != null && root.child('users').hasChild(auth.uid)\" } } This will ensure: User is authenticated User's UID exists in users Now, if we go back to our app, open the Browser Console, when we try to access data we should see an error message of this type: Uncaught (in promise) Error: PERMISSION_DENIED: Permission denied But if we sign in using vm.signIn() as an allowed user, then we should be able to access data.","title":"Setting Permissions"},{"location":"secure/#changing-the-ui","text":"At this point we may have realized using the Browser Terminal to authenticate ourselves is not a good user experience. To fix this, we can alter our page using techniques we've already learned to make it more user friendly.","title":"Changing the UI"},{"location":"secure/#state-dependant-page","text":"To start, we should wrap our current page contents in a div, and create another div along side it to hold a future login prompt. We can add v-show directives that depend on our state variable signedIn to show a login panel if the user is not signed in, or our main page if the user is signed in. <div v-show=\"!signedIn\"> <!-- Login prompt here... --> </div> <div v-show=\"signedIn\"> <!-- Page contents here... --> </div> Tip Although we could certainly use v-if , for performance it's technically better practice to use v-show for lots of elements. v-show simply adds a CSS hidden property to the div , while v-if will require the browser to re-render the contents.","title":"State Dependant Page"},{"location":"secure/#adding-login-buttons","text":"For the login page, we simply copy the header from the main page and add a link-button that will run signIn() when clicked: <div class=\"container mt-5\"> <div class=\"row\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>You are not signed in.</p> <a class=\"btn btn-primary\" v-on:click=\"signIn()\">Sign In with Google</a> </div> </div> </div> We can also make similar changes to our main page's header to display the user's email, add a link-button to run signOut() , and put a bit of margin for cleanliness: <div class=\"container mt-5\"> <div class=\"row mb-4\"> <div class=\"col-lg\" style=\"text-align: center;\"> <h1 id=\"title\">{{ titleText }}</h2> <p>Hello, {{ email }}!</p> <a class=\"btn btn-primary\" v-on:click=\"signOut()\">Sign Out</a> </div> </div> </div>","title":"Adding Login Buttons"},{"location":"secure/#displaying-user-info","text":"When a user logs in via Google, a few details are shared with the app: Email address Full name Profile picture Similar to how we got the user email, we can also display the other items as well. We can turn our Raspberry Pi card into a user details card like this: <div class=\"col-sm d-flex\"> <div class=\"card w-100\"> <img v-bind:src=\"photoURL\" class=\"card-img-top\" > <div class=\"card-body\"> <h5 class=\"card-title\">Hello, {{displayName}}!</h5> <p class=\"card-text\">{{email}}</p> <a class=\"btn btn-primary\" v-on:click=\"signOut()\">Sign Out</a> </div> </div> </div> Info We use the v-bind directive to bind the photoURL variable to the src attribute. Using {{ }} does not work on HTML attributes, only inner HTML content.","title":"Displaying User Info"},{"location":"secure/#allowing-domains","text":"If we access the app on Github Pages, the login popup may not work as expected. By default, Firebase rejects all domains except localhost and their own domain. To solve this, we can add our Github Pages domain: In Firebase Dashboard > Authorized domains , click Add Domain Add your [username].github.io address to the list.","title":"Allowing Domains"},{"location":"serial/","text":"Intro to UART Serial Communication Written by Curtis Lee Motivation In this article we will learn how UART (Universal asynchronous receiver-transmitter) serial works, and how it can help us construct projects. Though it sounds boring there some compelling reason to learn how this works: Helps us connect multiple subsystems together in project: devices to microcontroller microcontroller to computer wired and wireless connections Answer common questions in firmware engineering interview For ease of use we will primarily use Arduino IDE and Python in later examples. Different Types of Serial Communication UART is a type of serial communication, but not all serial communications are necessarily UART. There are some other kinds you may encounter in the Arduino ecosystem: SPI Synchronous, has a clock pin Need select/control pins to connect multiple devices I2C Asynchronous, each device has address UART Synchronous, devices need to agree on transfer speed, or baud rate Usually bidirectional, and using two devices In embedded development, both SPI and I2C are used mainly used for sensors, modules, etc and usually already integrated into pre-made libaries for those. Usually, UART is usually what people refer to as simply \"serial\", and is usually the go-to for connecting microcontroller systems together or connecting microcontrollers to a computer. Because of this, in this tutorial we will focus mainly on UART . In real life industry, UARTs are used frequently for all kinds of random stuff. For more information on all the protocols and differences between them, check out this article . How UART Serial works Basics To send data both ways, or bidirectional communication, UART is usually wired up like this: The RX (recieve) of one device is connected to the TX (tranmit) of the other, and vice versa. Using two wires allows both devices to send and receive independantly of and without interfering of other, also known as full-duplex mode . On the sending device, each data byte is broken up and transmitted one bit at a time, with padding to detect when each bit starts, and sometimes extra bits for additional features. The data is then read and assembled back into bytes on the recieving device. Baud Rates Since there is no clock signal to synchronize the ups and downs, to ensure both devices can communicate with each other properly, they need to agree upon a fixed rate to send data, known as a baud rate . Since each of our bits are binary 0's and 1's, we can also consider baud rate equivalent to bit rate. Some common baud rates include: 9600 115200 The Arduino serial monitor allows us to pick from preset common baud rates. Encoding By default, usually UART serial handles data in bytes . Bytes are really just 8-bit binary numbers, or 256 combinations of 1's and 0's, or 0-255 in decimal values. To represent useful symbols like characters, some kind of encoding is needed. An encoding scheme maps these 0-255 binary values into symbols. The most universal encoding scheme for bytes is ASCII . ASCII specifies which byte values correspond to a-z and A-Z letters, 0-9 digits, common punctuations marks, and some other features. A reference for the ASCII table can be found here . Line Termination These characters come from typewriter era and have special ASCII values: \\n is new line character, this is supposed to make the cursor move down one line. \\r is carriage return character, this supposed to make the cursor jump to the start of the line. These days in most terminals, just \\n is enough to make the cursor move to the start of next line , like hitting the Enter key into a text editor. On some systems, \\r\\n is preferred, particularly on Windows applications. The Arduino serial monitor also allows us to choose which line termination to use. Common USB-UART Adapters There are some common cheap module boards out there that have Serial UART pins and accept a USB connection. Some are also built-in to cheap Arduino boards. These adapters allow us to connect a device with USB ports, like a computer, to some kind of embedded device or project. Usually they are based on one of these common chipsets. Some might require driver installation to work on some operating systems: Official Arduino Serial Chip Built-in to most \"official design\" Arduino boards Should \"just work\" on all systems FTDI FT232 Series Most universally compatible chipset, but slightly more expensive Should \"just work\" on all systems CH340 Series If if doesn't work, install Drivers PL2303 Series If if doesn't work, install Drivers CP2102 Series If if doesn't work, install Drivers Checking device connection On the computer, there are some ways to check if the device is properly detected before doing anything. This is useful during troubleshooting. Windows Open Device Manager If successful, under Ports there will be an entry for the device, associated with a COM number. To connect to the device later, keep track of the COM number. Mac/Linux Open a terminal type ls /dev/tty* Usually at the very end there will appear a ttyUSB with a number. To connect to the device later, keep track of the path to the device. Tip In any operating system, if you're not sure which one is the correct device, or if it's even appearing up at all, you can try unplugging and replugging the USB Serial device and monitoring what changed in the listings each time. Opening a serial window When a serial device is connected to the computer, a serial terminal is software that shows a window to let us see what is being recieved, as well as send data back by typing with the keyboard. Some applications may be designed to be used over terminal like this, but in most situations, this is still extremely useful for debugging and making sure that the connection works. The easiest way to get started is using Arduino IDE. Under Tools > Port select the correct device found earlier. Usually there will only be one entry, or it will be obvious which is correct, unless you have many serial devices attached to the computer for some reason. Then open Serial Monitor . On an \"empty\" Arduino this probably won't do anything, so first we need to upload a sketch that will help us test the connection by sending some sort of feedback. Example Arduino sketches To run these examples, set the serial monitor baud rate to the appropriate value of 9600. Serial Echo This example should take whatever you enter into the terminal and echo it right back. void setup() { Serial.begin(9600); } void loop() { if (Serial.available()) { char c = Serial.read(); // save incoming data into c Serial.write(c); // send c right back } } If you see some onboard LEDs on the Arduino flashing, and whatever you type into the input appear in the window, it's probably working. Byte Information This example should take characters entered into the terminal and display it as different representations. void setup() { Serial.begin(9600); } void loop() { if (Serial.available()) { char c = Serial.read(); // save incoming data into c Serial.print(\"char\\tdec\\thex\\n\"); // print info Serial.print(c); // print c as char Serial.print('\\t'); Serial.print(c, DEC); // print as decimal value Serial.print('\\t'); Serial.print(c, HEX); // print as hexidecimal value Serial.print('\\n'); // print newline (as seperator) } } Turn on/off LED We can also write code to do different things based on what input was received and make a simple terminal application: void setup() { Serial.begin(9600); pinMode(LED_BUILTIN, OUTPUT); } void loop() { if (Serial.available()) { char c = Serial.read(); // save incoming data into c if (c == 'a'){ Serial.println(\"LED ON\"); digitalWrite(LED_BUILTIN, HIGH); // turn the LED on } else if (c == 'x'){ Serial.println(\"LED OFF\"); digitalWrite(LED_BUILTIN, LOW); // turn the LED off } else{ Serial.println(\"unknown command\"); } } } This example should read the input, and turn on or off the Arduino bulit-in LED (wired to pin 13) if it recieved a or x respectively. a and x are picked arbitrarily, you can replace them with whatever symbols you want and it should still work. Decoding numbers Previously we learned about ASCII encoding. When we type characters into the terminal we are actually sending ASCII encoded characters. If we type strings like 78 into the terminal, we aren't actually sending the byte value of 78 , but actually bytes 58 and 59 corresponding to ASCII representation of 7 and 8 . This sequence would need to be decoded to obtain a numerical int value in the Arduino. Luckily, Arduino provides a straightforward Serial.parseInt() to handle this conversion for us, although it may run a bit slow. Otherwise we would have to use C tricks to parse the input properly. void setup() { Serial.begin(9600); pinMode(LED_BUILTIN, OUTPUT); } unsigned long currentTime = 0; unsigned long lastTime = 0; unsigned long interval = 100; bool ledState = LOW; void loop() { currentTime = millis(); if (currentTime - lastTime > interval){ lastTime = currentTime; ledState = !ledState; // toggle the LED digitalWrite(LED_BUILTIN, ledState); } if (Serial.available()) { // use Arduino built-in function to convert the input to int // note: may be slow int value = Serial.parseInt(); Serial.println(value); if (value > 0 && value < 1000){ interval = value; // set the interval time to the entered value } } } Note This example blinks the LED without using delay() . While not strictly necessary in this case, it is generally better practice to, especially if we end up handling multiple tasks at once, since delay() pauses the Arduino from doing anything. More explanation can be found here . delay() also stops the Arduino from processing incoming serial data. However, there is a serial buffer that temporarily stores some incoming data, so it may be processed after the delay() is over. Nevertheless, it is still best practice to avoid delay() whenever possible to achieve faster response time and prevent the buffer from overflowing, which would result in lost data. These examples will avoid delay() whenever possible. Python Pyserial examples For these example we need to first install pyserial package in python so it can open serial port. python3 -m pip install pyserial Serial Echo To get started and make sure everything works, we can replicate the behavior of the Arduino serial monitor using Python. Recall from earlier example from Serial Echo , the Arduino sketch reads data from serial and echos it back to the computer. With this following Python script, we can enter bytes and read the response. Note that com_port in this and all following examples will also need to be replaced with the address of your current device. (COM4 is just an example) import serial import time com_port = 'COM4' arduino = serial.Serial(port=com_port, baudrate=9600, timeout=0.1) while True: tx_data = input(\"Enter something: \") # Taking input from user arduino.write(bytes(tx_data, 'utf-8')) # need to encode utf-8 into ascii rx_data = arduino.readline() print(rx_data) # printing the value Button Press To do more interesting things, we can wire a button up to pin 6 on the Arduino, read the button presses, and send something over serial when the button is pressed. This following Arduino sketch will read button presses, debounce them, and send a character x over serial. Note in this example we are using a timer and some extra logic to debounce the button, which is outside the scope of the guide. See this page to learn more about debouncing. // constants won't change. They're used here to set pin numbers: const int buttonPin = 6; // the number of the pushbutton pin // Variables will change: int buttonState; // the current reading from the input pin int lastButtonState = LOW; // the previous reading from the input pin unsigned long lastPressTime = 0; // the last time the output pin was toggled unsigned long debounceDelay = 50; // the debounce time; increase if the output flickers void setup() { Serial.begin(9600); pinMode(buttonPin, INPUT_PULLUP); } void loop() { int reading = digitalRead(buttonPin); if (reading != lastButtonState) { unsigned long currentTime = millis(); if ((currentTime - lastPressTime) > debounceDelay) { lastPressTime = currentTime; if (reading != buttonState) { buttonState = reading; if (buttonState == LOW) { // button is pressed Serial.write('x'); } } } } lastButtonState = reading; } Then, this Python script here will read the incoming x when the button is pressed and display some feedback in the terminal. import serial import time com_port = 'COM4' arduino = serial.Serial(port=com_port, baudrate=9600, timeout=0.1) while True: rx_data = arduino.readline() if rx_data: print(rx_data) # printing the value if rx_data == b'x': print('Button was pressed !') time.sleep(0.01) # slight delay to not hog cpu Simulate Keyboard To actually do something useful with the button, one thing we can do is mimic keyboard presses. The Python libaray PyAutoGUI lets us do things like mimic a mouse and keyboard with Python code. First we need to install the libary: python3 -m pip install pyautogui Then we can modify the Python script from above to do a pyautogui.write() to type out a phrase: import serial import time import pyautogui arduino = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, timeout=0.1) while True: rx_data = arduino.readline() if rx_data: print(rx_data) # printing the value if rx_data == b'x': print('Button was pressed !') pyautogui.write('Hello world!') time.sleep(0.01) Wireless serial There are even several solutions out there to get a serial link over wireless. Most can be found in the form of convinient and relatively inexpensive modules: Bluetooth Module HC-15","title":"Serial UART"},{"location":"serial/#intro-to-uart-serial-communication","text":"Written by Curtis Lee","title":"Intro to UART Serial Communication"},{"location":"serial/#motivation","text":"In this article we will learn how UART (Universal asynchronous receiver-transmitter) serial works, and how it can help us construct projects. Though it sounds boring there some compelling reason to learn how this works: Helps us connect multiple subsystems together in project: devices to microcontroller microcontroller to computer wired and wireless connections Answer common questions in firmware engineering interview For ease of use we will primarily use Arduino IDE and Python in later examples.","title":"Motivation"},{"location":"serial/#different-types-of-serial-communication","text":"UART is a type of serial communication, but not all serial communications are necessarily UART. There are some other kinds you may encounter in the Arduino ecosystem: SPI Synchronous, has a clock pin Need select/control pins to connect multiple devices I2C Asynchronous, each device has address UART Synchronous, devices need to agree on transfer speed, or baud rate Usually bidirectional, and using two devices In embedded development, both SPI and I2C are used mainly used for sensors, modules, etc and usually already integrated into pre-made libaries for those. Usually, UART is usually what people refer to as simply \"serial\", and is usually the go-to for connecting microcontroller systems together or connecting microcontrollers to a computer. Because of this, in this tutorial we will focus mainly on UART . In real life industry, UARTs are used frequently for all kinds of random stuff. For more information on all the protocols and differences between them, check out this article .","title":"Different Types of Serial Communication"},{"location":"serial/#how-uart-serial-works","text":"","title":"How UART Serial works"},{"location":"serial/#basics","text":"To send data both ways, or bidirectional communication, UART is usually wired up like this: The RX (recieve) of one device is connected to the TX (tranmit) of the other, and vice versa. Using two wires allows both devices to send and receive independantly of and without interfering of other, also known as full-duplex mode . On the sending device, each data byte is broken up and transmitted one bit at a time, with padding to detect when each bit starts, and sometimes extra bits for additional features. The data is then read and assembled back into bytes on the recieving device.","title":"Basics"},{"location":"serial/#baud-rates","text":"Since there is no clock signal to synchronize the ups and downs, to ensure both devices can communicate with each other properly, they need to agree upon a fixed rate to send data, known as a baud rate . Since each of our bits are binary 0's and 1's, we can also consider baud rate equivalent to bit rate. Some common baud rates include: 9600 115200 The Arduino serial monitor allows us to pick from preset common baud rates.","title":"Baud Rates"},{"location":"serial/#encoding","text":"By default, usually UART serial handles data in bytes . Bytes are really just 8-bit binary numbers, or 256 combinations of 1's and 0's, or 0-255 in decimal values. To represent useful symbols like characters, some kind of encoding is needed. An encoding scheme maps these 0-255 binary values into symbols. The most universal encoding scheme for bytes is ASCII . ASCII specifies which byte values correspond to a-z and A-Z letters, 0-9 digits, common punctuations marks, and some other features. A reference for the ASCII table can be found here .","title":"Encoding"},{"location":"serial/#line-termination","text":"These characters come from typewriter era and have special ASCII values: \\n is new line character, this is supposed to make the cursor move down one line. \\r is carriage return character, this supposed to make the cursor jump to the start of the line. These days in most terminals, just \\n is enough to make the cursor move to the start of next line , like hitting the Enter key into a text editor. On some systems, \\r\\n is preferred, particularly on Windows applications. The Arduino serial monitor also allows us to choose which line termination to use.","title":"Line Termination"},{"location":"serial/#common-usb-uart-adapters","text":"There are some common cheap module boards out there that have Serial UART pins and accept a USB connection. Some are also built-in to cheap Arduino boards. These adapters allow us to connect a device with USB ports, like a computer, to some kind of embedded device or project. Usually they are based on one of these common chipsets. Some might require driver installation to work on some operating systems: Official Arduino Serial Chip Built-in to most \"official design\" Arduino boards Should \"just work\" on all systems FTDI FT232 Series Most universally compatible chipset, but slightly more expensive Should \"just work\" on all systems CH340 Series If if doesn't work, install Drivers PL2303 Series If if doesn't work, install Drivers CP2102 Series If if doesn't work, install Drivers","title":"Common USB-UART Adapters"},{"location":"serial/#checking-device-connection","text":"On the computer, there are some ways to check if the device is properly detected before doing anything. This is useful during troubleshooting.","title":"Checking device connection"},{"location":"serial/#windows","text":"Open Device Manager If successful, under Ports there will be an entry for the device, associated with a COM number. To connect to the device later, keep track of the COM number.","title":"Windows"},{"location":"serial/#maclinux","text":"Open a terminal type ls /dev/tty* Usually at the very end there will appear a ttyUSB with a number. To connect to the device later, keep track of the path to the device. Tip In any operating system, if you're not sure which one is the correct device, or if it's even appearing up at all, you can try unplugging and replugging the USB Serial device and monitoring what changed in the listings each time.","title":"Mac/Linux"},{"location":"serial/#opening-a-serial-window","text":"When a serial device is connected to the computer, a serial terminal is software that shows a window to let us see what is being recieved, as well as send data back by typing with the keyboard. Some applications may be designed to be used over terminal like this, but in most situations, this is still extremely useful for debugging and making sure that the connection works. The easiest way to get started is using Arduino IDE. Under Tools > Port select the correct device found earlier. Usually there will only be one entry, or it will be obvious which is correct, unless you have many serial devices attached to the computer for some reason. Then open Serial Monitor . On an \"empty\" Arduino this probably won't do anything, so first we need to upload a sketch that will help us test the connection by sending some sort of feedback.","title":"Opening a serial window"},{"location":"serial/#example-arduino-sketches","text":"To run these examples, set the serial monitor baud rate to the appropriate value of 9600.","title":"Example Arduino sketches"},{"location":"serial/#serial-echo","text":"This example should take whatever you enter into the terminal and echo it right back. void setup() { Serial.begin(9600); } void loop() { if (Serial.available()) { char c = Serial.read(); // save incoming data into c Serial.write(c); // send c right back } } If you see some onboard LEDs on the Arduino flashing, and whatever you type into the input appear in the window, it's probably working.","title":"Serial Echo"},{"location":"serial/#byte-information","text":"This example should take characters entered into the terminal and display it as different representations. void setup() { Serial.begin(9600); } void loop() { if (Serial.available()) { char c = Serial.read(); // save incoming data into c Serial.print(\"char\\tdec\\thex\\n\"); // print info Serial.print(c); // print c as char Serial.print('\\t'); Serial.print(c, DEC); // print as decimal value Serial.print('\\t'); Serial.print(c, HEX); // print as hexidecimal value Serial.print('\\n'); // print newline (as seperator) } }","title":"Byte Information"},{"location":"serial/#turn-onoff-led","text":"We can also write code to do different things based on what input was received and make a simple terminal application: void setup() { Serial.begin(9600); pinMode(LED_BUILTIN, OUTPUT); } void loop() { if (Serial.available()) { char c = Serial.read(); // save incoming data into c if (c == 'a'){ Serial.println(\"LED ON\"); digitalWrite(LED_BUILTIN, HIGH); // turn the LED on } else if (c == 'x'){ Serial.println(\"LED OFF\"); digitalWrite(LED_BUILTIN, LOW); // turn the LED off } else{ Serial.println(\"unknown command\"); } } } This example should read the input, and turn on or off the Arduino bulit-in LED (wired to pin 13) if it recieved a or x respectively. a and x are picked arbitrarily, you can replace them with whatever symbols you want and it should still work.","title":"Turn on/off LED"},{"location":"serial/#decoding-numbers","text":"Previously we learned about ASCII encoding. When we type characters into the terminal we are actually sending ASCII encoded characters. If we type strings like 78 into the terminal, we aren't actually sending the byte value of 78 , but actually bytes 58 and 59 corresponding to ASCII representation of 7 and 8 . This sequence would need to be decoded to obtain a numerical int value in the Arduino. Luckily, Arduino provides a straightforward Serial.parseInt() to handle this conversion for us, although it may run a bit slow. Otherwise we would have to use C tricks to parse the input properly. void setup() { Serial.begin(9600); pinMode(LED_BUILTIN, OUTPUT); } unsigned long currentTime = 0; unsigned long lastTime = 0; unsigned long interval = 100; bool ledState = LOW; void loop() { currentTime = millis(); if (currentTime - lastTime > interval){ lastTime = currentTime; ledState = !ledState; // toggle the LED digitalWrite(LED_BUILTIN, ledState); } if (Serial.available()) { // use Arduino built-in function to convert the input to int // note: may be slow int value = Serial.parseInt(); Serial.println(value); if (value > 0 && value < 1000){ interval = value; // set the interval time to the entered value } } } Note This example blinks the LED without using delay() . While not strictly necessary in this case, it is generally better practice to, especially if we end up handling multiple tasks at once, since delay() pauses the Arduino from doing anything. More explanation can be found here . delay() also stops the Arduino from processing incoming serial data. However, there is a serial buffer that temporarily stores some incoming data, so it may be processed after the delay() is over. Nevertheless, it is still best practice to avoid delay() whenever possible to achieve faster response time and prevent the buffer from overflowing, which would result in lost data. These examples will avoid delay() whenever possible.","title":"Decoding numbers"},{"location":"serial/#python-pyserial-examples","text":"For these example we need to first install pyserial package in python so it can open serial port. python3 -m pip install pyserial","title":"Python Pyserial examples"},{"location":"serial/#serial-echo_1","text":"To get started and make sure everything works, we can replicate the behavior of the Arduino serial monitor using Python. Recall from earlier example from Serial Echo , the Arduino sketch reads data from serial and echos it back to the computer. With this following Python script, we can enter bytes and read the response. Note that com_port in this and all following examples will also need to be replaced with the address of your current device. (COM4 is just an example) import serial import time com_port = 'COM4' arduino = serial.Serial(port=com_port, baudrate=9600, timeout=0.1) while True: tx_data = input(\"Enter something: \") # Taking input from user arduino.write(bytes(tx_data, 'utf-8')) # need to encode utf-8 into ascii rx_data = arduino.readline() print(rx_data) # printing the value","title":"Serial Echo"},{"location":"serial/#button-press","text":"To do more interesting things, we can wire a button up to pin 6 on the Arduino, read the button presses, and send something over serial when the button is pressed. This following Arduino sketch will read button presses, debounce them, and send a character x over serial. Note in this example we are using a timer and some extra logic to debounce the button, which is outside the scope of the guide. See this page to learn more about debouncing. // constants won't change. They're used here to set pin numbers: const int buttonPin = 6; // the number of the pushbutton pin // Variables will change: int buttonState; // the current reading from the input pin int lastButtonState = LOW; // the previous reading from the input pin unsigned long lastPressTime = 0; // the last time the output pin was toggled unsigned long debounceDelay = 50; // the debounce time; increase if the output flickers void setup() { Serial.begin(9600); pinMode(buttonPin, INPUT_PULLUP); } void loop() { int reading = digitalRead(buttonPin); if (reading != lastButtonState) { unsigned long currentTime = millis(); if ((currentTime - lastPressTime) > debounceDelay) { lastPressTime = currentTime; if (reading != buttonState) { buttonState = reading; if (buttonState == LOW) { // button is pressed Serial.write('x'); } } } } lastButtonState = reading; } Then, this Python script here will read the incoming x when the button is pressed and display some feedback in the terminal. import serial import time com_port = 'COM4' arduino = serial.Serial(port=com_port, baudrate=9600, timeout=0.1) while True: rx_data = arduino.readline() if rx_data: print(rx_data) # printing the value if rx_data == b'x': print('Button was pressed !') time.sleep(0.01) # slight delay to not hog cpu","title":"Button Press"},{"location":"serial/#simulate-keyboard","text":"To actually do something useful with the button, one thing we can do is mimic keyboard presses. The Python libaray PyAutoGUI lets us do things like mimic a mouse and keyboard with Python code. First we need to install the libary: python3 -m pip install pyautogui Then we can modify the Python script from above to do a pyautogui.write() to type out a phrase: import serial import time import pyautogui arduino = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, timeout=0.1) while True: rx_data = arduino.readline() if rx_data: print(rx_data) # printing the value if rx_data == b'x': print('Button was pressed !') pyautogui.write('Hello world!') time.sleep(0.01)","title":"Simulate Keyboard"},{"location":"serial/#wireless-serial","text":"There are even several solutions out there to get a serial link over wireless. Most can be found in the form of convinient and relatively inexpensive modules: Bluetooth Module HC-15","title":"Wireless serial"},{"location":"staff/","text":"Teaching Staff Curtis Lee Office Hours Email LinkedIn Dillon Hicks Office Hours Email LinkedIn George Troulis Office Hours Email LinkedIn","title":"Teaching Staff"},{"location":"staff/#teaching-staff","text":"","title":"Teaching Staff"},{"location":"staff/#curtis-lee","text":"Office Hours Email LinkedIn","title":"Curtis Lee"},{"location":"staff/#dillon-hicks","text":"Office Hours Email LinkedIn","title":"Dillon Hicks"},{"location":"staff/#george-troulis","text":"Office Hours Email LinkedIn","title":"George Troulis"},{"location":"web/","text":"Intro to Frontend Development Written by Curtis Lee The modern World Wide Web is truly a world of chaos and anarchy, with competing powers rising and falling, along with their preferred way of doing things. Brought to you by your favorite web browser! Fundamentals The most fundamental concepts of Web Development essentially boil down to these three (3): HTML The most basic building blocks of a webpage. Most atomic elements are various \"tags\" containing information. Tags can have attributes to assign special characteristics or functionality to them. Tags can be nested. The browser reads all these tags and builds a DOM (Document Object Model) Example: <html> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> </html> CSS Tells the browser how to render the website. Makes it look good! Defined by \"selecting\" specific HTML tags and setting styling attributes to them. Tells the browser how to render elements of the DOM. Example: body { background-color: beige; text-align: center; } JavaScript JavaScript is NOT Java . Makes the website come alive! Can manipulate HTML elemeents in the DOM. Pieces of software (programming) that runs in the browser. Example: document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; Info For more guides and references to HTML, CSS, and JS stuff, a good resource is w3schools.com Getting Started Info Click here to download starter code examples for this guide. Starting an HTML document from scratch is fairly straightforward. Create a new folder for your project. In the folder, create a empty text file named index.html and open it in VS Code. By copying and pasting the examples shown previously, adding some extra tags, we can make this: <!DOCTYPE html> <html> <head> <title>My App</title> </head> <style> body { background-color: beige; text-align: center; } </style> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> <script> document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; </script> </html> We can now open the file with a web browser to see the results. Notice: The background of the page is colored beige, and the text is centered on the page. This is consistent with the CSS styling we specified. The big <h1> text shows \"Hello JavaScript\", which is not the original text, but rather set by our JavaScript script. If we remove that JavaScript snippet from our page, this will no longer happen. Modifying Code We can also create more interesting behavior by changing the JavaScript. Try replacing the code in the <script> tag with this: setTimeout(function(){ document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; }, 1000); And then save the file and refresh the page. Notice the text will now change after one (1) second! Important Most modern browsers have a \"lazy\" refresh that doesn't always reload all our changes. To actually refresh we have to perform a \"hard\" refresh which in Chrome can be done by holding down Shift and refreshing, or right clicking the refresh button. Serving the Website While opening the file as .html in the browser works for now, in later steps it will not be sufficient. We will need a proper HTTP server to serve the webpage. Luckily, we can use Python's built-in server: Open a terminal in the folder with the index.html file. Run python -m http.server In the browser, go to http://localhost:8000 Breakdown of this address: HTTP is the protocol being used by the browser. HTTPS is the encrypted version of HTTP. localhost is the address the computer uses to refer to itself. Equivalent to an IP address of 127.0.0.1 . By default, our server is not accessible from the outside world. 8000 specifies the port the webserver is running on. By default, our Python webserver runs on port 8000 . By default, the HTTP protocol uses port 80 . Therefore we have to explicitly specify the non-standard port. The webpage should appear as before, but now it's served by HTTP. Frameworks To bring order to the wild atomized world wrought by HTML, CSS, and JavaScript, various competing powers have attempted to create structure with Web Frameworks. What are Frameworks? Usually open source projects, sometimes maintained by big corps (Google, Facebook, etc). Introduce a standarized way of writing patterns of code that occur frequently. Most importantly: greatly simplifies code and makes our lives easier! So many Frameworks! The World Wide Web is a fast paced world that changes frequently, and so do frameworks. Most frameworks commonly deployed today have only been created within the past decade. Choosing between the many competing options can be a daunting task. However to make our life easier and to get our app quickly off the ground without suffering too much learning curve, we are going to use this particular combination: Vue.js - HTML+JavaScript Framework Bootstrap - CSS framework Intro to Vue.js Vue is one of latest and greatest rising stars of the Frontend Framework scene. Compared to the more popular React or Angular, Vue is relatively easy to get working off the ground, without complicated setup. Adding Vue To include the Vue library into our page, we can use this script tag: <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.12\"></script> Since the browser loads the DOM in order, we must place this before we write any Javascript code that uses Vue. The best place in our current page is after <body> but before <script> . Tip If we open Developer Tools in our browser (F12 in Chrome), click the Console tab, we should now see some messages about Vue to confirm it was loaded successfully. After that, we can create a Vue object called vm (within the script block) like this: var vm = new Vue({}) Each Vue instance is defined by a dictionary with various fields specifying variables, functions, and special behavior. The ones we'll be using are: el - string name of id of the HTML tag to contain the app data - dictionary of variables used created - special function that runs when the app is created (similar to setup() in Arduino) methods - dictionary of methods/functions used So, before filling those fields, our instantiation should look like this: var vm = new Vue({ el: \"\", data: {}, created: function() {}, methods: {} }) For our HTML we want to create a new <div> element with id=\"app\" to wrap the content of our page. Then we declare el: \"app\" in our Vue object. Our code should now look like this: ... <body> <div id=\"app\"> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: {}, created: function() {}, methods: {} }) </script> ... Note: we can remove the JavaScript code from the previous section. One-Way Data Binding To witness the full power of Vue, we can set up what's called a data binding: Change the text in our <h1> to {{ titleText }} . Add a string titleText to data. Our code now: ... <body> <div id=\"app\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: { titleText: \"Hello World from Vue!\" }, created: function() {}, methods: {} }) </script> ... Now if we refresh the page we should see that Vue changes the titleText into what we specified! Tip Another useful perk of Vue is how easy it is to debug our application with the built-in browser Console. To open the console in Chrome, we can open Developer Tools or press F12 and click the Console tab. Our data fields are all properties of the Vue object, and since our Vue object is called vm , we can address titleText as vm.titleText Try typing vm.titleText into the console. What does it output? is this expected? Try typing vm.titleText = 'ECE 196' into the console. Now look at the HTML page. What is the <h1> text now? One of the most powerful advantages of Vue data binding is how values in the HTML and JavaScript portions of our webpage are seamlessly connected, in real time. If we wanted to achieve the same with pure JavaScript, it would not only take much more time writing and debugging more code, but the complexity would also grow exponentially when we add more stuff to our webpage. Two-Way Data Binding We just saw how to get Vue to put variables into HTML, but we also want to be able to put HTML variables into Vue. One way to do this is with two-way data binding. Before we do that, we need to create something in HTML designed to handle user input. One type of common input is the checkbox. We can add three checkboxes to the page like this: <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> Next we want to declare variables in Vue for these values to go. One way we can do this is to add a dictionary under data with 3 boolean values like this: data: { ... color: { r: false, g: false, b: false } }, If we refresh the page, we should see our three checkboxes appear. Tip To verify that everything works we can use the console again: Tick an arbitrary combination of the boxes on our page type vm.color in the browser console expand the Observer object click each color field to load the value Is this what we'd expect? To make things really interesting we can reflect the values back onto our HTML page. Under the checkboxes, we can add another <p> like this: <p>Selected Values: {{ color }}</p> When the boxes are ticked, we can see the dictionary updated automatically on our page! Directives Directives are special HTML tag attributes that define behavior in Vue but are otherwise ignored by the browser. As you may have noticed in the previous section, we used the v-model directive to tell Vue that we want two-way data binding on our checkbox values. There are a multitude of other directives in Vue to accomplish all kinds of tasks, but we will only use a few ones here: v-model - creates two way data-binding v-if - displays an element only if the condition is true v-else - compliment for v-if v-on:change or @change - runs a function when the element is changed v-on:click or @click - runs a function when the element is clicked To see these in action, we can create some more HTML elements with Vue directives. Replace: <p>Selected Values: {{ color }}</p> with this: <button type=\"button\" v-on:click=\"selectAll(true)\">Select All</button> <p v-if=\"color.r || color.g || color.b\">Selected Values: {{ color }} </p> <p v-else>No colors are selected.</p> And in our Vue object, add a method called selectAll() that takes a parameter value like this: methods: { selectAll: function(value) { this.color.r = value; this.color.g = value; this.color.b = value; } } Info Since color is a field of vm , and the function runs within vm 's scope, we reference color as this.color Now when we refresh the page, we should see: Two-way data binding on the checkboxes still works. Different <p> element is shown if no checkboxes are ticked. Clicking the button will run a function that ticks all the checkboxes. Connecting to Firebase This sections assumes we already have a Firebase app set up. Adding Firebase To include the Firebase Core and Realtime Database libraries on our webpage, we can add the following lines similar to including the Vue library: <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-app.js\"></script> <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-database.js\"></script> Now outside and before our vm = new Vue() object, we need to initialize our objects called firebase and database : var firebaseConfig = { ... }; firebase.initializeApp(firebaseConfig); database = firebase.database() var vm = new Vue({ ... Replacing firebaseConfig with the one given in our Firebase App dashboard. Info It's possible to put the Firebase objects within our Vue object, but for our purposes it's easier to leave them seperate. Reading Data To read color data from Firebase, lets first add a new method in our Vue called setupColorListener() . This will create a listener in the background of our web app that listens for any changes in our database entry, and runs a function every time Firebase sends us these changes. setupColorListener: function() { var colorDataRef = database.ref('path/to/ref'); colorDataRef.on('value', function(snapshot) { vm.color = snapshot.val(); }); }, But note that so far our Firebase data is structured like this: Therefore, if we want the color data, our reference path should be changed to 'data/color' , which gives us: var colorDataRef = database.ref('data/color'); Info The callback function explicitly references color as vm.color and not this.color . This is because the callback is actually run within the Firebase object, which is outside the scope of vm . And we want the function to be run as soon as the page loads. So it makes sense to call the function under our created initialization function: created: function() { this.setupColorListener(); }, In Firebase Dashboard, if we now change the values within color , we should now see them update the checkboxes on our page, in real time! Writing Data While we can recieve data from Firebase, we also want changes to the checkboxes to also be sent to Firebase. This can be done with the v-on:change directive. Start by adding a new method called updateColor() in our Vue's methods: updateColor: function() { database.ref('data/color').set(this.color); } Next we want to enclose the checkboxes into a new form element with the directive like this: <form v-on:change=\"updateColor()\"> <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> </form> Similarily, we want to add an v-on:click directive to the button as well: <button type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> Every time Vue detects a change in the <form> containing all the checkboxes, it will run the function that submits the changed color dictionary. If we tick/untick any of the checkboxes, we should also be able to now see the values get updated in Firebase Dashboard as well! Intro to CSS There are two main ways to fine-tune the way our HTML elements look. The class attribute By assigning our element to a class value defined in <style> . Useful when there are many elements, or long CSS specifications. We already have seen some of this in action. If we change our <style> block to this: <style> body { background-color: lightblue; } </style> We see that: The background color is changed to lightblue Everything reverts back to being left aligned, which is the default. The style attribute Can also inject some CSS properties directly into the tag. For very minor finer-tuning. For example this will center all the text inside the <div> : <div style=\"text-align: center;\"> I am centered text. </div> I am centered text. Fixing Loading Glitches When we refresh the page, sometimes we can still see {{ }} in the HTML before Vue loads. We can actually use a special Vue directive v-cloak along with some simple CSS to fix this. Add this to the style block: [v-cloak] { display: none; } And also add the directive onto the main <div> of the app: <div id=\"app\" v-cloak> Now the page will no longer flash those {{ }} before Vue loads. Changing Font Size For individual elements, we can change the font size using either method. To specify font size, we use the CSS property font-size plus some kind of CSS unit . One popular unit is the em , which is based on the default font size in that element. For example, 3em means 3 times the font size. Using class attribute: <style> .sensor-data { font-size: 3em; } </style> <p class=\"sensor-data\"> 25C </p> Using style attribute: <p style=\"font-size: 3em\"> 25C </p> Both should produce the same result: Temperature: 25C Bootstrap At this point you may have noticed our website overall still looks pretty unattractive. We could write more CSS from scratch to make our website look exactly how we want, but in most cases that's a waste of time. Instead, we can use another framework for CSS called Bootstrap. See Bootstrap Section Hosting on Github Pages Info Follow this tutorial (30min) to learn how to use Git and Github. Follow GitHub Pages guide here . Project site is recommended, but you can also create a profile site. Create a new repository on the Github website. In the repository's Settings > GitHub Pages select the primary branch as Source . Copy the git ssh url. Open terminal in project folder and enter the following commands: git init git remote add origin <git ssh url here> git add . git commit -m first commit! git push Tip To upload updated code, repeat steps 7-9 and replace \"first commit!\" with a brief description of the new changes. Also, Git may require you to set an upstream (follow instructions onscreen) on the first push. Ensure the html page is called index.html . Then navigate to yourusername.github.io/reponame to view your website. Conclusion The content in this guide is by no means all-inclusive. In fact, we barely scratched the surface of what these frameworks have to offer. For more features and help it's definitely worth looking at the documentation these products.","title":"VueJS"},{"location":"web/#intro-to-frontend-development","text":"Written by Curtis Lee The modern World Wide Web is truly a world of chaos and anarchy, with competing powers rising and falling, along with their preferred way of doing things. Brought to you by your favorite web browser!","title":"Intro to Frontend Development"},{"location":"web/#fundamentals","text":"The most fundamental concepts of Web Development essentially boil down to these three (3): HTML The most basic building blocks of a webpage. Most atomic elements are various \"tags\" containing information. Tags can have attributes to assign special characteristics or functionality to them. Tags can be nested. The browser reads all these tags and builds a DOM (Document Object Model) Example: <html> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> </html> CSS Tells the browser how to render the website. Makes it look good! Defined by \"selecting\" specific HTML tags and setting styling attributes to them. Tells the browser how to render elements of the DOM. Example: body { background-color: beige; text-align: center; } JavaScript JavaScript is NOT Java . Makes the website come alive! Can manipulate HTML elemeents in the DOM. Pieces of software (programming) that runs in the browser. Example: document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; Info For more guides and references to HTML, CSS, and JS stuff, a good resource is w3schools.com","title":"Fundamentals"},{"location":"web/#getting-started","text":"Info Click here to download starter code examples for this guide. Starting an HTML document from scratch is fairly straightforward. Create a new folder for your project. In the folder, create a empty text file named index.html and open it in VS Code. By copying and pasting the examples shown previously, adding some extra tags, we can make this: <!DOCTYPE html> <html> <head> <title>My App</title> </head> <style> body { background-color: beige; text-align: center; } </style> <body> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </body> <script> document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; </script> </html> We can now open the file with a web browser to see the results. Notice: The background of the page is colored beige, and the text is centered on the page. This is consistent with the CSS styling we specified. The big <h1> text shows \"Hello JavaScript\", which is not the original text, but rather set by our JavaScript script. If we remove that JavaScript snippet from our page, this will no longer happen.","title":"Getting Started"},{"location":"web/#modifying-code","text":"We can also create more interesting behavior by changing the JavaScript. Try replacing the code in the <script> tag with this: setTimeout(function(){ document.getElementById(\"title\").innerHTML = \"Hello JavaScript!\"; }, 1000); And then save the file and refresh the page. Notice the text will now change after one (1) second! Important Most modern browsers have a \"lazy\" refresh that doesn't always reload all our changes. To actually refresh we have to perform a \"hard\" refresh which in Chrome can be done by holding down Shift and refreshing, or right clicking the refresh button.","title":"Modifying Code"},{"location":"web/#serving-the-website","text":"While opening the file as .html in the browser works for now, in later steps it will not be sufficient. We will need a proper HTTP server to serve the webpage. Luckily, we can use Python's built-in server: Open a terminal in the folder with the index.html file. Run python -m http.server In the browser, go to http://localhost:8000 Breakdown of this address: HTTP is the protocol being used by the browser. HTTPS is the encrypted version of HTTP. localhost is the address the computer uses to refer to itself. Equivalent to an IP address of 127.0.0.1 . By default, our server is not accessible from the outside world. 8000 specifies the port the webserver is running on. By default, our Python webserver runs on port 8000 . By default, the HTTP protocol uses port 80 . Therefore we have to explicitly specify the non-standard port. The webpage should appear as before, but now it's served by HTTP.","title":"Serving the Website"},{"location":"web/#frameworks","text":"To bring order to the wild atomized world wrought by HTML, CSS, and JavaScript, various competing powers have attempted to create structure with Web Frameworks.","title":"Frameworks"},{"location":"web/#what-are-frameworks","text":"Usually open source projects, sometimes maintained by big corps (Google, Facebook, etc). Introduce a standarized way of writing patterns of code that occur frequently. Most importantly: greatly simplifies code and makes our lives easier!","title":"What are Frameworks?"},{"location":"web/#so-many-frameworks","text":"The World Wide Web is a fast paced world that changes frequently, and so do frameworks. Most frameworks commonly deployed today have only been created within the past decade. Choosing between the many competing options can be a daunting task. However to make our life easier and to get our app quickly off the ground without suffering too much learning curve, we are going to use this particular combination: Vue.js - HTML+JavaScript Framework Bootstrap - CSS framework","title":"So many Frameworks!"},{"location":"web/#intro-to-vuejs","text":"Vue is one of latest and greatest rising stars of the Frontend Framework scene. Compared to the more popular React or Angular, Vue is relatively easy to get working off the ground, without complicated setup.","title":"Intro to Vue.js"},{"location":"web/#adding-vue","text":"To include the Vue library into our page, we can use this script tag: <script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.12\"></script> Since the browser loads the DOM in order, we must place this before we write any Javascript code that uses Vue. The best place in our current page is after <body> but before <script> . Tip If we open Developer Tools in our browser (F12 in Chrome), click the Console tab, we should now see some messages about Vue to confirm it was loaded successfully. After that, we can create a Vue object called vm (within the script block) like this: var vm = new Vue({}) Each Vue instance is defined by a dictionary with various fields specifying variables, functions, and special behavior. The ones we'll be using are: el - string name of id of the HTML tag to contain the app data - dictionary of variables used created - special function that runs when the app is created (similar to setup() in Arduino) methods - dictionary of methods/functions used So, before filling those fields, our instantiation should look like this: var vm = new Vue({ el: \"\", data: {}, created: function() {}, methods: {} }) For our HTML we want to create a new <div> element with id=\"app\" to wrap the content of our page. Then we declare el: \"app\" in our Vue object. Our code should now look like this: ... <body> <div id=\"app\"> <h1 id=\"title\">I am a title font!</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: {}, created: function() {}, methods: {} }) </script> ... Note: we can remove the JavaScript code from the previous section.","title":"Adding Vue"},{"location":"web/#one-way-data-binding","text":"To witness the full power of Vue, we can set up what's called a data binding: Change the text in our <h1> to {{ titleText }} . Add a string titleText to data. Our code now: ... <body> <div id=\"app\"> <h1 id=\"title\">{{ titleText }}</h2> <p>I am a paragraph of content!</p> </div> </body> ... <script> var vm = new Vue({ el: \"#app\", data: { titleText: \"Hello World from Vue!\" }, created: function() {}, methods: {} }) </script> ... Now if we refresh the page we should see that Vue changes the titleText into what we specified! Tip Another useful perk of Vue is how easy it is to debug our application with the built-in browser Console. To open the console in Chrome, we can open Developer Tools or press F12 and click the Console tab. Our data fields are all properties of the Vue object, and since our Vue object is called vm , we can address titleText as vm.titleText Try typing vm.titleText into the console. What does it output? is this expected? Try typing vm.titleText = 'ECE 196' into the console. Now look at the HTML page. What is the <h1> text now? One of the most powerful advantages of Vue data binding is how values in the HTML and JavaScript portions of our webpage are seamlessly connected, in real time. If we wanted to achieve the same with pure JavaScript, it would not only take much more time writing and debugging more code, but the complexity would also grow exponentially when we add more stuff to our webpage.","title":"One-Way Data Binding"},{"location":"web/#two-way-data-binding","text":"We just saw how to get Vue to put variables into HTML, but we also want to be able to put HTML variables into Vue. One way to do this is with two-way data binding. Before we do that, we need to create something in HTML designed to handle user input. One type of common input is the checkbox. We can add three checkboxes to the page like this: <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> Next we want to declare variables in Vue for these values to go. One way we can do this is to add a dictionary under data with 3 boolean values like this: data: { ... color: { r: false, g: false, b: false } }, If we refresh the page, we should see our three checkboxes appear. Tip To verify that everything works we can use the console again: Tick an arbitrary combination of the boxes on our page type vm.color in the browser console expand the Observer object click each color field to load the value Is this what we'd expect? To make things really interesting we can reflect the values back onto our HTML page. Under the checkboxes, we can add another <p> like this: <p>Selected Values: {{ color }}</p> When the boxes are ticked, we can see the dictionary updated automatically on our page!","title":"Two-Way Data Binding"},{"location":"web/#directives","text":"Directives are special HTML tag attributes that define behavior in Vue but are otherwise ignored by the browser. As you may have noticed in the previous section, we used the v-model directive to tell Vue that we want two-way data binding on our checkbox values. There are a multitude of other directives in Vue to accomplish all kinds of tasks, but we will only use a few ones here: v-model - creates two way data-binding v-if - displays an element only if the condition is true v-else - compliment for v-if v-on:change or @change - runs a function when the element is changed v-on:click or @click - runs a function when the element is clicked To see these in action, we can create some more HTML elements with Vue directives. Replace: <p>Selected Values: {{ color }}</p> with this: <button type=\"button\" v-on:click=\"selectAll(true)\">Select All</button> <p v-if=\"color.r || color.g || color.b\">Selected Values: {{ color }} </p> <p v-else>No colors are selected.</p> And in our Vue object, add a method called selectAll() that takes a parameter value like this: methods: { selectAll: function(value) { this.color.r = value; this.color.g = value; this.color.b = value; } } Info Since color is a field of vm , and the function runs within vm 's scope, we reference color as this.color Now when we refresh the page, we should see: Two-way data binding on the checkboxes still works. Different <p> element is shown if no checkboxes are ticked. Clicking the button will run a function that ticks all the checkboxes.","title":"Directives"},{"location":"web/#connecting-to-firebase","text":"This sections assumes we already have a Firebase app set up.","title":"Connecting to Firebase"},{"location":"web/#adding-firebase","text":"To include the Firebase Core and Realtime Database libraries on our webpage, we can add the following lines similar to including the Vue library: <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-app.js\"></script> <script src=\"https://www.gstatic.com/firebasejs/7.21.0/firebase-database.js\"></script> Now outside and before our vm = new Vue() object, we need to initialize our objects called firebase and database : var firebaseConfig = { ... }; firebase.initializeApp(firebaseConfig); database = firebase.database() var vm = new Vue({ ... Replacing firebaseConfig with the one given in our Firebase App dashboard. Info It's possible to put the Firebase objects within our Vue object, but for our purposes it's easier to leave them seperate.","title":"Adding Firebase"},{"location":"web/#reading-data","text":"To read color data from Firebase, lets first add a new method in our Vue called setupColorListener() . This will create a listener in the background of our web app that listens for any changes in our database entry, and runs a function every time Firebase sends us these changes. setupColorListener: function() { var colorDataRef = database.ref('path/to/ref'); colorDataRef.on('value', function(snapshot) { vm.color = snapshot.val(); }); }, But note that so far our Firebase data is structured like this: Therefore, if we want the color data, our reference path should be changed to 'data/color' , which gives us: var colorDataRef = database.ref('data/color'); Info The callback function explicitly references color as vm.color and not this.color . This is because the callback is actually run within the Firebase object, which is outside the scope of vm . And we want the function to be run as soon as the page loads. So it makes sense to call the function under our created initialization function: created: function() { this.setupColorListener(); }, In Firebase Dashboard, if we now change the values within color , we should now see them update the checkboxes on our page, in real time!","title":"Reading Data"},{"location":"web/#writing-data","text":"While we can recieve data from Firebase, we also want changes to the checkboxes to also be sent to Firebase. This can be done with the v-on:change directive. Start by adding a new method called updateColor() in our Vue's methods: updateColor: function() { database.ref('data/color').set(this.color); } Next we want to enclose the checkboxes into a new form element with the directive like this: <form v-on:change=\"updateColor()\"> <label> <input type=\"checkbox\" v-model=\"color.r\"> Red </label> <label> <input type=\"checkbox\" v-model=\"color.g\"> Green </label> <label> <input type=\"checkbox\" v-model=\"color.b\"> Blue </label> </form> Similarily, we want to add an v-on:click directive to the button as well: <button type=\"button\" v-on:click=\"selectAll(true); updateColor()\">Select All</button> Every time Vue detects a change in the <form> containing all the checkboxes, it will run the function that submits the changed color dictionary. If we tick/untick any of the checkboxes, we should also be able to now see the values get updated in Firebase Dashboard as well!","title":"Writing Data"},{"location":"web/#intro-to-css","text":"There are two main ways to fine-tune the way our HTML elements look. The class attribute By assigning our element to a class value defined in <style> . Useful when there are many elements, or long CSS specifications. We already have seen some of this in action. If we change our <style> block to this: <style> body { background-color: lightblue; } </style> We see that: The background color is changed to lightblue Everything reverts back to being left aligned, which is the default. The style attribute Can also inject some CSS properties directly into the tag. For very minor finer-tuning. For example this will center all the text inside the <div> : <div style=\"text-align: center;\"> I am centered text. </div> I am centered text.","title":"Intro to CSS"},{"location":"web/#fixing-loading-glitches","text":"When we refresh the page, sometimes we can still see {{ }} in the HTML before Vue loads. We can actually use a special Vue directive v-cloak along with some simple CSS to fix this. Add this to the style block: [v-cloak] { display: none; } And also add the directive onto the main <div> of the app: <div id=\"app\" v-cloak> Now the page will no longer flash those {{ }} before Vue loads.","title":"Fixing Loading Glitches"},{"location":"web/#changing-font-size","text":"For individual elements, we can change the font size using either method. To specify font size, we use the CSS property font-size plus some kind of CSS unit . One popular unit is the em , which is based on the default font size in that element. For example, 3em means 3 times the font size. Using class attribute: <style> .sensor-data { font-size: 3em; } </style> <p class=\"sensor-data\"> 25C </p> Using style attribute: <p style=\"font-size: 3em\"> 25C </p> Both should produce the same result: Temperature: 25C","title":"Changing Font Size"},{"location":"web/#bootstrap","text":"At this point you may have noticed our website overall still looks pretty unattractive. We could write more CSS from scratch to make our website look exactly how we want, but in most cases that's a waste of time. Instead, we can use another framework for CSS called Bootstrap. See Bootstrap Section","title":"Bootstrap"},{"location":"web/#hosting-on-github-pages","text":"Info Follow this tutorial (30min) to learn how to use Git and Github. Follow GitHub Pages guide here . Project site is recommended, but you can also create a profile site. Create a new repository on the Github website. In the repository's Settings > GitHub Pages select the primary branch as Source . Copy the git ssh url. Open terminal in project folder and enter the following commands: git init git remote add origin <git ssh url here> git add . git commit -m first commit! git push Tip To upload updated code, repeat steps 7-9 and replace \"first commit!\" with a brief description of the new changes. Also, Git may require you to set an upstream (follow instructions onscreen) on the first push. Ensure the html page is called index.html . Then navigate to yourusername.github.io/reponame to view your website.","title":"Hosting on Github Pages"},{"location":"web/#conclusion","text":"The content in this guide is by no means all-inclusive. In fact, we barely scratched the surface of what these frameworks have to offer. For more features and help it's definitely worth looking at the documentation these products.","title":"Conclusion"}]}